using System;
using System.CodeDom;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Reflection;
using System.Text;

namespace Mono.CSharp
{
	// Token: 0x0200000C RID: 12
	internal class CSharpCodeGenerator : System.CodeDom.Compiler.CodeGenerator
	{
		// Token: 0x0600001F RID: 31 RVA: 0x00003008 File Offset: 0x00001208
		public CSharpCodeGenerator()
		{
			this.dont_write_semicolon = false;
		}

		// Token: 0x06000020 RID: 32 RVA: 0x00003018 File Offset: 0x00001218
		public CSharpCodeGenerator(IDictionary<string, string> providerOptions)
		{
			this.providerOptions = providerOptions;
		}

		// Token: 0x17000003 RID: 3
		// (get) Token: 0x06000022 RID: 34 RVA: 0x00003308 File Offset: 0x00001508
		protected IDictionary<string, string> ProviderOptions
		{
			get
			{
				return this.providerOptions;
			}
		}

		// Token: 0x17000004 RID: 4
		// (get) Token: 0x06000023 RID: 35 RVA: 0x00003310 File Offset: 0x00001510
		protected override string NullToken
		{
			get
			{
				return "null";
			}
		}

		// Token: 0x06000024 RID: 36 RVA: 0x00003318 File Offset: 0x00001518
		protected override void GenerateArrayCreateExpression(System.CodeDom.CodeArrayCreateExpression expression)
		{
			TextWriter output = base.Output;
			output.Write("new ");
			System.CodeDom.CodeExpressionCollection initializers = expression.Initializers;
			System.CodeDom.CodeTypeReference codeTypeReference = expression.CreateType;
			if (initializers.Count > 0)
			{
				this.OutputType(codeTypeReference);
				if (expression.CreateType.ArrayRank == 0)
				{
					output.Write("[]");
				}
				this.OutputStartBrace();
				base.Indent++;
				this.OutputExpressionList(initializers, true);
				base.Indent--;
				output.Write("}");
			}
			else
			{
				for (System.CodeDom.CodeTypeReference arrayElementType = codeTypeReference.ArrayElementType; arrayElementType != null; arrayElementType = arrayElementType.ArrayElementType)
				{
					codeTypeReference = arrayElementType;
				}
				this.OutputType(codeTypeReference);
				output.Write('[');
				System.CodeDom.CodeExpression sizeExpression = expression.SizeExpression;
				if (sizeExpression != null)
				{
					base.GenerateExpression(sizeExpression);
				}
				else
				{
					output.Write(expression.Size);
				}
				output.Write(']');
			}
		}

		// Token: 0x06000025 RID: 37 RVA: 0x00003408 File Offset: 0x00001608
		protected override void GenerateBaseReferenceExpression(System.CodeDom.CodeBaseReferenceExpression expression)
		{
			base.Output.Write("base");
		}

		// Token: 0x06000026 RID: 38 RVA: 0x0000341C File Offset: 0x0000161C
		protected override void GenerateCastExpression(System.CodeDom.CodeCastExpression expression)
		{
			TextWriter output = base.Output;
			output.Write("((");
			this.OutputType(expression.TargetType);
			output.Write(")(");
			base.GenerateExpression(expression.Expression);
			output.Write("))");
		}

		// Token: 0x06000027 RID: 39 RVA: 0x0000346C File Offset: 0x0000166C
		protected override void GenerateCompileUnitStart(System.CodeDom.CodeCompileUnit compileUnit)
		{
			this.GenerateComment(new System.CodeDom.CodeComment("------------------------------------------------------------------------------"));
			this.GenerateComment(new System.CodeDom.CodeComment(" <autogenerated>"));
			this.GenerateComment(new System.CodeDom.CodeComment("     This code was generated by a tool."));
			this.GenerateComment(new System.CodeDom.CodeComment("     Mono Runtime Version: " + Environment.Version));
			this.GenerateComment(new System.CodeDom.CodeComment(string.Empty));
			this.GenerateComment(new System.CodeDom.CodeComment("     Changes to this file may cause incorrect behavior and will be lost if "));
			this.GenerateComment(new System.CodeDom.CodeComment("     the code is regenerated."));
			this.GenerateComment(new System.CodeDom.CodeComment(" </autogenerated>"));
			this.GenerateComment(new System.CodeDom.CodeComment("------------------------------------------------------------------------------"));
			base.Output.WriteLine();
			base.GenerateCompileUnitStart(compileUnit);
		}

		// Token: 0x06000028 RID: 40 RVA: 0x00003528 File Offset: 0x00001728
		protected override void GenerateCompileUnit(System.CodeDom.CodeCompileUnit compileUnit)
		{
			this.GenerateCompileUnitStart(compileUnit);
			if (compileUnit.AssemblyCustomAttributes.Count > 0)
			{
				this.OutputAttributes(compileUnit.AssemblyCustomAttributes, "assembly: ", false);
				base.Output.WriteLine(string.Empty);
			}
			foreach (object obj in compileUnit.Namespaces)
			{
				System.CodeDom.CodeNamespace ns = (System.CodeDom.CodeNamespace)obj;
				this.GenerateNamespace(ns);
			}
			this.GenerateCompileUnitEnd(compileUnit);
		}

		// Token: 0x06000029 RID: 41 RVA: 0x000035D8 File Offset: 0x000017D8
		protected override void GenerateDefaultValueExpression(System.CodeDom.CodeDefaultValueExpression e)
		{
			base.Output.Write("default(");
			this.OutputType(e.Type);
			base.Output.Write(')');
		}

		// Token: 0x0600002A RID: 42 RVA: 0x00003610 File Offset: 0x00001810
		protected override void GenerateDelegateCreateExpression(System.CodeDom.CodeDelegateCreateExpression expression)
		{
			TextWriter output = base.Output;
			output.Write("new ");
			this.OutputType(expression.DelegateType);
			output.Write('(');
			System.CodeDom.CodeExpression targetObject = expression.TargetObject;
			if (targetObject != null)
			{
				base.GenerateExpression(targetObject);
				base.Output.Write('.');
			}
			output.Write(this.GetSafeName(expression.MethodName));
			output.Write(')');
		}

		// Token: 0x0600002B RID: 43 RVA: 0x00003680 File Offset: 0x00001880
		protected override void GenerateFieldReferenceExpression(System.CodeDom.CodeFieldReferenceExpression expression)
		{
			System.CodeDom.CodeExpression targetObject = expression.TargetObject;
			if (targetObject != null)
			{
				base.GenerateExpression(targetObject);
				base.Output.Write('.');
			}
			base.Output.Write(this.GetSafeName(expression.FieldName));
		}

		// Token: 0x0600002C RID: 44 RVA: 0x000036C8 File Offset: 0x000018C8
		protected override void GenerateArgumentReferenceExpression(System.CodeDom.CodeArgumentReferenceExpression expression)
		{
			base.Output.Write(this.GetSafeName(expression.ParameterName));
		}

		// Token: 0x0600002D RID: 45 RVA: 0x000036EC File Offset: 0x000018EC
		protected override void GenerateVariableReferenceExpression(System.CodeDom.CodeVariableReferenceExpression expression)
		{
			base.Output.Write(this.GetSafeName(expression.VariableName));
		}

		// Token: 0x0600002E RID: 46 RVA: 0x00003710 File Offset: 0x00001910
		protected override void GenerateIndexerExpression(System.CodeDom.CodeIndexerExpression expression)
		{
			TextWriter output = base.Output;
			base.GenerateExpression(expression.TargetObject);
			output.Write('[');
			this.OutputExpressionList(expression.Indices);
			output.Write(']');
		}

		// Token: 0x0600002F RID: 47 RVA: 0x0000374C File Offset: 0x0000194C
		protected override void GenerateArrayIndexerExpression(System.CodeDom.CodeArrayIndexerExpression expression)
		{
			TextWriter output = base.Output;
			base.GenerateExpression(expression.TargetObject);
			output.Write('[');
			this.OutputExpressionList(expression.Indices);
			output.Write(']');
		}

		// Token: 0x06000030 RID: 48 RVA: 0x00003788 File Offset: 0x00001988
		protected override void GenerateSnippetExpression(System.CodeDom.CodeSnippetExpression expression)
		{
			base.Output.Write(expression.Value);
		}

		// Token: 0x06000031 RID: 49 RVA: 0x0000379C File Offset: 0x0000199C
		protected override void GenerateMethodInvokeExpression(System.CodeDom.CodeMethodInvokeExpression expression)
		{
			TextWriter output = base.Output;
			this.GenerateMethodReferenceExpression(expression.Method);
			output.Write('(');
			this.OutputExpressionList(expression.Parameters);
			output.Write(')');
		}

		// Token: 0x06000032 RID: 50 RVA: 0x000037D8 File Offset: 0x000019D8
		protected override void GenerateMethodReferenceExpression(System.CodeDom.CodeMethodReferenceExpression expression)
		{
			if (expression.TargetObject != null)
			{
				base.GenerateExpression(expression.TargetObject);
				base.Output.Write('.');
			}
			base.Output.Write(this.GetSafeName(expression.MethodName));
			if (expression.TypeArguments.Count > 0)
			{
				base.Output.Write(this.GetTypeArguments(expression.TypeArguments));
			}
		}

		// Token: 0x06000033 RID: 51 RVA: 0x00003848 File Offset: 0x00001A48
		protected override void GenerateEventReferenceExpression(System.CodeDom.CodeEventReferenceExpression expression)
		{
			if (expression.TargetObject != null)
			{
				base.GenerateExpression(expression.TargetObject);
				base.Output.Write('.');
			}
			base.Output.Write(this.GetSafeName(expression.EventName));
		}

		// Token: 0x06000034 RID: 52 RVA: 0x00003890 File Offset: 0x00001A90
		protected override void GenerateDelegateInvokeExpression(System.CodeDom.CodeDelegateInvokeExpression expression)
		{
			if (expression.TargetObject != null)
			{
				base.GenerateExpression(expression.TargetObject);
			}
			base.Output.Write('(');
			this.OutputExpressionList(expression.Parameters);
			base.Output.Write(')');
		}

		// Token: 0x06000035 RID: 53 RVA: 0x000038DC File Offset: 0x00001ADC
		protected override void GenerateObjectCreateExpression(System.CodeDom.CodeObjectCreateExpression expression)
		{
			base.Output.Write("new ");
			this.OutputType(expression.CreateType);
			base.Output.Write('(');
			this.OutputExpressionList(expression.Parameters);
			base.Output.Write(')');
		}

		// Token: 0x06000036 RID: 54 RVA: 0x0000392C File Offset: 0x00001B2C
		protected override void GeneratePropertyReferenceExpression(System.CodeDom.CodePropertyReferenceExpression expression)
		{
			System.CodeDom.CodeExpression targetObject = expression.TargetObject;
			if (targetObject != null)
			{
				base.GenerateExpression(targetObject);
				base.Output.Write('.');
			}
			base.Output.Write(this.GetSafeName(expression.PropertyName));
		}

		// Token: 0x06000037 RID: 55 RVA: 0x00003974 File Offset: 0x00001B74
		protected override void GeneratePropertySetValueReferenceExpression(System.CodeDom.CodePropertySetValueReferenceExpression expression)
		{
			base.Output.Write("value");
		}

		// Token: 0x06000038 RID: 56 RVA: 0x00003988 File Offset: 0x00001B88
		protected override void GenerateThisReferenceExpression(System.CodeDom.CodeThisReferenceExpression expression)
		{
			base.Output.Write("this");
		}

		// Token: 0x06000039 RID: 57 RVA: 0x0000399C File Offset: 0x00001B9C
		protected override void GenerateExpressionStatement(System.CodeDom.CodeExpressionStatement statement)
		{
			base.GenerateExpression(statement.Expression);
			if (this.dont_write_semicolon)
			{
				return;
			}
			base.Output.WriteLine(';');
		}

		// Token: 0x0600003A RID: 58 RVA: 0x000039D0 File Offset: 0x00001BD0
		protected override void GenerateIterationStatement(System.CodeDom.CodeIterationStatement statement)
		{
			TextWriter output = base.Output;
			this.dont_write_semicolon = true;
			output.Write("for (");
			base.GenerateStatement(statement.InitStatement);
			output.Write("; ");
			base.GenerateExpression(statement.TestExpression);
			output.Write("; ");
			base.GenerateStatement(statement.IncrementStatement);
			output.Write(")");
			this.dont_write_semicolon = false;
			this.OutputStartBrace();
			base.Indent++;
			base.GenerateStatements(statement.Statements);
			base.Indent--;
			output.WriteLine('}');
		}

		// Token: 0x0600003B RID: 59 RVA: 0x00003A78 File Offset: 0x00001C78
		protected override void GenerateThrowExceptionStatement(System.CodeDom.CodeThrowExceptionStatement statement)
		{
			base.Output.Write("throw");
			if (statement.ToThrow != null)
			{
				base.Output.Write(' ');
				base.GenerateExpression(statement.ToThrow);
			}
			base.Output.WriteLine(";");
		}

		// Token: 0x0600003C RID: 60 RVA: 0x00003ACC File Offset: 0x00001CCC
		protected override void GenerateComment(System.CodeDom.CodeComment comment)
		{
			TextWriter output = base.Output;
			string value;
			if (comment.DocComment)
			{
				value = "///";
			}
			else
			{
				value = "//";
			}
			output.Write(value);
			output.Write(' ');
			string text = comment.Text;
			for (int i = 0; i < text.Length; i++)
			{
				output.Write(text[i]);
				if (text[i] == '\r')
				{
					if (i >= text.Length - 1 || text[i + 1] != '\n')
					{
						output.Write(value);
					}
				}
				else if (text[i] == '\n')
				{
					output.Write(value);
				}
			}
			output.WriteLine();
		}

		// Token: 0x0600003D RID: 61 RVA: 0x00003B90 File Offset: 0x00001D90
		protected override void GenerateMethodReturnStatement(System.CodeDom.CodeMethodReturnStatement statement)
		{
			TextWriter output = base.Output;
			if (statement.Expression != null)
			{
				output.Write("return ");
				base.GenerateExpression(statement.Expression);
				output.WriteLine(";");
			}
			else
			{
				output.WriteLine("return;");
			}
		}

		// Token: 0x0600003E RID: 62 RVA: 0x00003BE4 File Offset: 0x00001DE4
		protected override void GenerateConditionStatement(System.CodeDom.CodeConditionStatement statement)
		{
			TextWriter output = base.Output;
			output.Write("if (");
			base.GenerateExpression(statement.Condition);
			output.Write(")");
			this.OutputStartBrace();
			base.Indent++;
			base.GenerateStatements(statement.TrueStatements);
			base.Indent--;
			System.CodeDom.CodeStatementCollection falseStatements = statement.FalseStatements;
			if (falseStatements.Count > 0)
			{
				output.Write('}');
				if (base.Options.ElseOnClosing)
				{
					output.Write(' ');
				}
				else
				{
					output.WriteLine();
				}
				output.Write("else");
				this.OutputStartBrace();
				base.Indent++;
				base.GenerateStatements(falseStatements);
				base.Indent--;
			}
			output.WriteLine('}');
		}

		// Token: 0x0600003F RID: 63 RVA: 0x00003CC4 File Offset: 0x00001EC4
		protected override void GenerateTryCatchFinallyStatement(System.CodeDom.CodeTryCatchFinallyStatement statement)
		{
			TextWriter output = base.Output;
			System.CodeDom.Compiler.CodeGeneratorOptions options = base.Options;
			output.Write("try");
			this.OutputStartBrace();
			base.Indent++;
			base.GenerateStatements(statement.TryStatements);
			base.Indent--;
			foreach (object obj in statement.CatchClauses)
			{
				System.CodeDom.CodeCatchClause codeCatchClause = (System.CodeDom.CodeCatchClause)obj;
				output.Write('}');
				if (options.ElseOnClosing)
				{
					output.Write(' ');
				}
				else
				{
					output.WriteLine();
				}
				output.Write("catch (");
				this.OutputTypeNamePair(codeCatchClause.CatchExceptionType, this.GetSafeName(codeCatchClause.LocalName));
				output.Write(")");
				this.OutputStartBrace();
				base.Indent++;
				base.GenerateStatements(codeCatchClause.Statements);
				base.Indent--;
			}
			System.CodeDom.CodeStatementCollection finallyStatements = statement.FinallyStatements;
			if (finallyStatements.Count > 0)
			{
				output.Write('}');
				if (options.ElseOnClosing)
				{
					output.Write(' ');
				}
				else
				{
					output.WriteLine();
				}
				output.Write("finally");
				this.OutputStartBrace();
				base.Indent++;
				base.GenerateStatements(finallyStatements);
				base.Indent--;
			}
			output.WriteLine('}');
		}

		// Token: 0x06000040 RID: 64 RVA: 0x00003E70 File Offset: 0x00002070
		protected override void GenerateAssignStatement(System.CodeDom.CodeAssignStatement statement)
		{
			TextWriter output = base.Output;
			base.GenerateExpression(statement.Left);
			output.Write(" = ");
			base.GenerateExpression(statement.Right);
			if (this.dont_write_semicolon)
			{
				return;
			}
			output.WriteLine(';');
		}

		// Token: 0x06000041 RID: 65 RVA: 0x00003EBC File Offset: 0x000020BC
		protected override void GenerateAttachEventStatement(System.CodeDom.CodeAttachEventStatement statement)
		{
			TextWriter output = base.Output;
			this.GenerateEventReferenceExpression(statement.Event);
			output.Write(" += ");
			base.GenerateExpression(statement.Listener);
			output.WriteLine(';');
		}

		// Token: 0x06000042 RID: 66 RVA: 0x00003EFC File Offset: 0x000020FC
		protected override void GenerateRemoveEventStatement(System.CodeDom.CodeRemoveEventStatement statement)
		{
			TextWriter output = base.Output;
			this.GenerateEventReferenceExpression(statement.Event);
			output.Write(" -= ");
			base.GenerateExpression(statement.Listener);
			output.WriteLine(';');
		}

		// Token: 0x06000043 RID: 67 RVA: 0x00003F3C File Offset: 0x0000213C
		protected override void GenerateGotoStatement(System.CodeDom.CodeGotoStatement statement)
		{
			TextWriter output = base.Output;
			output.Write("goto ");
			output.Write(this.GetSafeName(statement.Label));
			output.WriteLine(";");
		}

		// Token: 0x06000044 RID: 68 RVA: 0x00003F78 File Offset: 0x00002178
		protected override void GenerateLabeledStatement(System.CodeDom.CodeLabeledStatement statement)
		{
			base.Indent--;
			base.Output.Write(statement.Label);
			base.Output.WriteLine(":");
			base.Indent++;
			if (statement.Statement != null)
			{
				base.GenerateStatement(statement.Statement);
			}
		}

		// Token: 0x06000045 RID: 69 RVA: 0x00003FDC File Offset: 0x000021DC
		protected override void GenerateVariableDeclarationStatement(System.CodeDom.CodeVariableDeclarationStatement statement)
		{
			TextWriter output = base.Output;
			this.OutputTypeNamePair(statement.Type, this.GetSafeName(statement.Name));
			System.CodeDom.CodeExpression initExpression = statement.InitExpression;
			if (initExpression != null)
			{
				output.Write(" = ");
				base.GenerateExpression(initExpression);
			}
			if (!this.dont_write_semicolon)
			{
				output.WriteLine(';');
			}
		}

		// Token: 0x06000046 RID: 70 RVA: 0x0000403C File Offset: 0x0000223C
		protected override void GenerateLinePragmaStart(System.CodeDom.CodeLinePragma linePragma)
		{
			base.Output.WriteLine();
			base.Output.Write("#line ");
			base.Output.Write(linePragma.LineNumber);
			base.Output.Write(" \"");
			base.Output.Write(linePragma.FileName);
			base.Output.Write("\"");
			base.Output.WriteLine();
		}

		// Token: 0x06000047 RID: 71 RVA: 0x000040B4 File Offset: 0x000022B4
		protected override void GenerateLinePragmaEnd(System.CodeDom.CodeLinePragma linePragma)
		{
			base.Output.WriteLine();
			base.Output.WriteLine("#line default");
			base.Output.WriteLine("#line hidden");
		}

		// Token: 0x06000048 RID: 72 RVA: 0x000040EC File Offset: 0x000022EC
		protected override void GenerateEvent(System.CodeDom.CodeMemberEvent eventRef, System.CodeDom.CodeTypeDeclaration declaration)
		{
			if (base.IsCurrentDelegate || base.IsCurrentEnum)
			{
				return;
			}
			this.OutputAttributes(eventRef.CustomAttributes, null, false);
			if (eventRef.PrivateImplementationType == null)
			{
				this.OutputMemberAccessModifier(eventRef.Attributes);
			}
			base.Output.Write("event ");
			if (eventRef.PrivateImplementationType != null)
			{
				this.OutputTypeNamePair(eventRef.Type, eventRef.PrivateImplementationType.BaseType + "." + eventRef.Name);
			}
			else
			{
				this.OutputTypeNamePair(eventRef.Type, this.GetSafeName(eventRef.Name));
			}
			base.Output.WriteLine(';');
		}

		// Token: 0x06000049 RID: 73 RVA: 0x000041A4 File Offset: 0x000023A4
		protected override void GenerateField(System.CodeDom.CodeMemberField field)
		{
			if (base.IsCurrentDelegate || base.IsCurrentInterface)
			{
				return;
			}
			TextWriter output = base.Output;
			this.OutputAttributes(field.CustomAttributes, null, false);
			if (base.IsCurrentEnum)
			{
				base.Output.Write(this.GetSafeName(field.Name));
			}
			else
			{
				System.CodeDom.MemberAttributes attributes = field.Attributes;
				this.OutputMemberAccessModifier(attributes);
				this.OutputVTableModifier(attributes);
				this.OutputFieldScopeModifier(attributes);
				this.OutputTypeNamePair(field.Type, this.GetSafeName(field.Name));
			}
			System.CodeDom.CodeExpression initExpression = field.InitExpression;
			if (initExpression != null)
			{
				output.Write(" = ");
				base.GenerateExpression(initExpression);
			}
			if (base.IsCurrentEnum)
			{
				output.WriteLine(',');
			}
			else
			{
				output.WriteLine(';');
			}
		}

		// Token: 0x0600004A RID: 74 RVA: 0x00004278 File Offset: 0x00002478
		protected override void GenerateSnippetMember(System.CodeDom.CodeSnippetTypeMember member)
		{
			base.Output.Write(member.Text);
		}

		// Token: 0x0600004B RID: 75 RVA: 0x0000428C File Offset: 0x0000248C
		protected override void GenerateEntryPointMethod(System.CodeDom.CodeEntryPointMethod method, System.CodeDom.CodeTypeDeclaration declaration)
		{
			this.OutputAttributes(method.CustomAttributes, null, false);
			base.Output.Write("public static ");
			this.OutputType(method.ReturnType);
			base.Output.Write(" Main()");
			this.OutputStartBrace();
			base.Indent++;
			base.GenerateStatements(method.Statements);
			base.Indent--;
			base.Output.WriteLine("}");
		}

		// Token: 0x0600004C RID: 76 RVA: 0x00004314 File Offset: 0x00002514
		protected override void GenerateMethod(System.CodeDom.CodeMemberMethod method, System.CodeDom.CodeTypeDeclaration declaration)
		{
			if (base.IsCurrentDelegate || base.IsCurrentEnum)
			{
				return;
			}
			TextWriter output = base.Output;
			this.OutputAttributes(method.CustomAttributes, null, false);
			this.OutputAttributes(method.ReturnTypeCustomAttributes, "return: ", false);
			System.CodeDom.MemberAttributes attributes = method.Attributes;
			if (!base.IsCurrentInterface)
			{
				if (method.PrivateImplementationType == null)
				{
					this.OutputMemberAccessModifier(attributes);
					this.OutputVTableModifier(attributes);
					this.OutputMemberScopeModifier(attributes);
				}
			}
			else
			{
				this.OutputVTableModifier(attributes);
			}
			this.OutputType(method.ReturnType);
			output.Write(' ');
			System.CodeDom.CodeTypeReference privateImplementationType = method.PrivateImplementationType;
			if (privateImplementationType != null)
			{
				output.Write(privateImplementationType.BaseType);
				output.Write('.');
			}
			output.Write(this.GetSafeName(method.Name));
			this.GenerateGenericsParameters(method.TypeParameters);
			output.Write('(');
			this.OutputParameters(method.Parameters);
			output.Write(')');
			this.GenerateGenericsConstraints(method.TypeParameters);
			if (CSharpCodeGenerator.IsAbstract(attributes) || declaration.IsInterface)
			{
				output.WriteLine(';');
			}
			else
			{
				this.OutputStartBrace();
				base.Indent++;
				base.GenerateStatements(method.Statements);
				base.Indent--;
				output.WriteLine('}');
			}
		}

		// Token: 0x0600004D RID: 77 RVA: 0x00004474 File Offset: 0x00002674
		private static bool IsAbstract(System.CodeDom.MemberAttributes attributes)
		{
			return (attributes & System.CodeDom.MemberAttributes.ScopeMask) == System.CodeDom.MemberAttributes.Abstract;
		}

		// Token: 0x0600004E RID: 78 RVA: 0x00004480 File Offset: 0x00002680
		protected override void GenerateProperty(System.CodeDom.CodeMemberProperty property, System.CodeDom.CodeTypeDeclaration declaration)
		{
			if (base.IsCurrentDelegate || base.IsCurrentEnum)
			{
				return;
			}
			TextWriter output = base.Output;
			this.OutputAttributes(property.CustomAttributes, null, false);
			System.CodeDom.MemberAttributes attributes = property.Attributes;
			if (!base.IsCurrentInterface)
			{
				if (property.PrivateImplementationType == null)
				{
					this.OutputMemberAccessModifier(attributes);
					this.OutputVTableModifier(attributes);
					this.OutputMemberScopeModifier(attributes);
				}
			}
			else
			{
				this.OutputVTableModifier(attributes);
			}
			this.OutputType(property.Type);
			output.Write(' ');
			if (!base.IsCurrentInterface && property.PrivateImplementationType != null)
			{
				output.Write(property.PrivateImplementationType.BaseType);
				output.Write('.');
			}
			if (string.Compare(property.Name, "Item", true, CultureInfo.InvariantCulture) == 0 && property.Parameters.Count > 0)
			{
				output.Write("this[");
				this.OutputParameters(property.Parameters);
				output.Write(']');
			}
			else
			{
				output.Write(this.GetSafeName(property.Name));
			}
			this.OutputStartBrace();
			base.Indent++;
			if (declaration.IsInterface || CSharpCodeGenerator.IsAbstract(property.Attributes))
			{
				if (property.HasGet)
				{
					output.WriteLine("get;");
				}
				if (property.HasSet)
				{
					output.WriteLine("set;");
				}
			}
			else
			{
				if (property.HasGet)
				{
					output.Write("get");
					this.OutputStartBrace();
					base.Indent++;
					base.GenerateStatements(property.GetStatements);
					base.Indent--;
					output.WriteLine('}');
				}
				if (property.HasSet)
				{
					output.Write("set");
					this.OutputStartBrace();
					base.Indent++;
					base.GenerateStatements(property.SetStatements);
					base.Indent--;
					output.WriteLine('}');
				}
			}
			base.Indent--;
			output.WriteLine('}');
		}

		// Token: 0x0600004F RID: 79 RVA: 0x000046AC File Offset: 0x000028AC
		protected override void GenerateConstructor(System.CodeDom.CodeConstructor constructor, System.CodeDom.CodeTypeDeclaration declaration)
		{
			if (base.IsCurrentDelegate || base.IsCurrentEnum || base.IsCurrentInterface)
			{
				return;
			}
			this.OutputAttributes(constructor.CustomAttributes, null, false);
			this.OutputMemberAccessModifier(constructor.Attributes);
			base.Output.Write(this.GetSafeName(base.CurrentTypeName) + "(");
			this.OutputParameters(constructor.Parameters);
			base.Output.Write(")");
			if (constructor.BaseConstructorArgs.Count > 0)
			{
				base.Output.WriteLine(" : ");
				base.Indent += 2;
				base.Output.Write("base(");
				this.OutputExpressionList(constructor.BaseConstructorArgs);
				base.Output.Write(')');
				base.Indent -= 2;
			}
			if (constructor.ChainedConstructorArgs.Count > 0)
			{
				base.Output.WriteLine(" : ");
				base.Indent += 2;
				base.Output.Write("this(");
				this.OutputExpressionList(constructor.ChainedConstructorArgs);
				base.Output.Write(')');
				base.Indent -= 2;
			}
			this.OutputStartBrace();
			base.Indent++;
			base.GenerateStatements(constructor.Statements);
			base.Indent--;
			base.Output.WriteLine('}');
		}

		// Token: 0x06000050 RID: 80 RVA: 0x0000483C File Offset: 0x00002A3C
		protected override void GenerateTypeConstructor(System.CodeDom.CodeTypeConstructor constructor)
		{
			if (base.IsCurrentDelegate || base.IsCurrentEnum || base.IsCurrentInterface)
			{
				return;
			}
			this.OutputAttributes(constructor.CustomAttributes, null, false);
			base.Output.Write("static " + this.GetSafeName(base.CurrentTypeName) + "()");
			this.OutputStartBrace();
			base.Indent++;
			base.GenerateStatements(constructor.Statements);
			base.Indent--;
			base.Output.WriteLine('}');
		}

		// Token: 0x06000051 RID: 81 RVA: 0x000048DC File Offset: 0x00002ADC
		protected override void GenerateTypeStart(System.CodeDom.CodeTypeDeclaration declaration)
		{
			TextWriter output = base.Output;
			this.OutputAttributes(declaration.CustomAttributes, null, false);
			if (!base.IsCurrentDelegate)
			{
				this.OutputTypeAttributes(declaration);
				output.Write(this.GetSafeName(declaration.Name));
				this.GenerateGenericsParameters(declaration.TypeParameters);
				IEnumerator enumerator = declaration.BaseTypes.GetEnumerator();
				if (enumerator.MoveNext())
				{
					System.CodeDom.CodeTypeReference type = (System.CodeDom.CodeTypeReference)enumerator.Current;
					output.Write(" : ");
					this.OutputType(type);
					while (enumerator.MoveNext())
					{
						object obj = enumerator.Current;
						type = (System.CodeDom.CodeTypeReference)obj;
						output.Write(", ");
						this.OutputType(type);
					}
				}
				this.GenerateGenericsConstraints(declaration.TypeParameters);
				this.OutputStartBrace();
				base.Indent++;
			}
			else
			{
				if ((declaration.TypeAttributes & TypeAttributes.VisibilityMask) == TypeAttributes.Public)
				{
					output.Write("public ");
				}
				System.CodeDom.CodeTypeDelegate codeTypeDelegate = (System.CodeDom.CodeTypeDelegate)declaration;
				output.Write("delegate ");
				this.OutputType(codeTypeDelegate.ReturnType);
				output.Write(" ");
				output.Write(this.GetSafeName(declaration.Name));
				output.Write("(");
				this.OutputParameters(codeTypeDelegate.Parameters);
				output.WriteLine(");");
			}
		}

		// Token: 0x06000052 RID: 82 RVA: 0x00004A2C File Offset: 0x00002C2C
		protected override void GenerateTypeEnd(System.CodeDom.CodeTypeDeclaration declaration)
		{
			if (!base.IsCurrentDelegate)
			{
				base.Indent--;
				base.Output.WriteLine("}");
			}
		}

		// Token: 0x06000053 RID: 83 RVA: 0x00004A64 File Offset: 0x00002C64
		protected override void GenerateNamespaceStart(System.CodeDom.CodeNamespace ns)
		{
			TextWriter output = base.Output;
			string name = ns.Name;
			if (name != null && name.Length != 0)
			{
				output.Write("namespace ");
				output.Write(this.GetSafeName(name));
				this.OutputStartBrace();
				base.Indent++;
			}
		}

		// Token: 0x06000054 RID: 84 RVA: 0x00004ABC File Offset: 0x00002CBC
		protected override void GenerateNamespaceEnd(System.CodeDom.CodeNamespace ns)
		{
			string name = ns.Name;
			if (name != null && name.Length != 0)
			{
				base.Indent--;
				base.Output.WriteLine("}");
			}
		}

		// Token: 0x06000055 RID: 85 RVA: 0x00004B00 File Offset: 0x00002D00
		protected override void GenerateNamespaceImport(System.CodeDom.CodeNamespaceImport import)
		{
			TextWriter output = base.Output;
			output.Write("using ");
			output.Write(this.GetSafeName(import.Namespace));
			output.WriteLine(';');
		}

		// Token: 0x06000056 RID: 86 RVA: 0x00004B3C File Offset: 0x00002D3C
		protected override void GenerateAttributeDeclarationsStart(System.CodeDom.CodeAttributeDeclarationCollection attributes)
		{
			base.Output.Write('[');
		}

		// Token: 0x06000057 RID: 87 RVA: 0x00004B4C File Offset: 0x00002D4C
		protected override void GenerateAttributeDeclarationsEnd(System.CodeDom.CodeAttributeDeclarationCollection attributes)
		{
			base.Output.Write(']');
		}

		// Token: 0x06000058 RID: 88 RVA: 0x00004B5C File Offset: 0x00002D5C
		private void OutputStartBrace()
		{
			if (base.Options.BracingStyle == "C")
			{
				base.Output.WriteLine(string.Empty);
				base.Output.WriteLine("{");
			}
			else
			{
				base.Output.WriteLine(" {");
			}
		}

		// Token: 0x06000059 RID: 89 RVA: 0x00004BB8 File Offset: 0x00002DB8
		private void OutputAttributes(System.CodeDom.CodeAttributeDeclarationCollection attributes, string prefix, bool inline)
		{
			bool flag = false;
			foreach (object obj in attributes)
			{
				System.CodeDom.CodeAttributeDeclaration codeAttributeDeclaration = (System.CodeDom.CodeAttributeDeclaration)obj;
				if (codeAttributeDeclaration.Name == "System.ParamArrayAttribute")
				{
					flag = true;
				}
				else
				{
					this.GenerateAttributeDeclarationsStart(attributes);
					if (prefix != null)
					{
						base.Output.Write(prefix);
					}
					this.OutputAttributeDeclaration(codeAttributeDeclaration);
					this.GenerateAttributeDeclarationsEnd(attributes);
					if (inline)
					{
						base.Output.Write(" ");
					}
					else
					{
						base.Output.WriteLine();
					}
				}
			}
			if (flag)
			{
				if (prefix != null)
				{
					base.Output.Write(prefix);
				}
				base.Output.Write("params");
				if (inline)
				{
					base.Output.Write(" ");
				}
				else
				{
					base.Output.WriteLine();
				}
			}
		}

		// Token: 0x0600005A RID: 90 RVA: 0x00004CD4 File Offset: 0x00002ED4
		private void OutputAttributeDeclaration(System.CodeDom.CodeAttributeDeclaration attribute)
		{
			base.Output.Write(attribute.Name.Replace('+', '.'));
			base.Output.Write('(');
			IEnumerator enumerator = attribute.Arguments.GetEnumerator();
			if (enumerator.MoveNext())
			{
				System.CodeDom.CodeAttributeArgument argument = (System.CodeDom.CodeAttributeArgument)enumerator.Current;
				this.OutputAttributeArgument(argument);
				while (enumerator.MoveNext())
				{
					base.Output.Write(", ");
					argument = (System.CodeDom.CodeAttributeArgument)enumerator.Current;
					this.OutputAttributeArgument(argument);
				}
			}
			base.Output.Write(')');
		}

		// Token: 0x0600005B RID: 91 RVA: 0x00004D74 File Offset: 0x00002F74
		protected override void OutputType(System.CodeDom.CodeTypeReference type)
		{
			base.Output.Write(this.GetTypeOutput(type));
		}

		// Token: 0x0600005C RID: 92 RVA: 0x00004D88 File Offset: 0x00002F88
		private void OutputVTableModifier(System.CodeDom.MemberAttributes attributes)
		{
			if ((attributes & System.CodeDom.MemberAttributes.VTableMask) == System.CodeDom.MemberAttributes.New)
			{
				base.Output.Write("new ");
			}
		}

		// Token: 0x0600005D RID: 93 RVA: 0x00004DA8 File Offset: 0x00002FA8
		protected override void OutputFieldScopeModifier(System.CodeDom.MemberAttributes attributes)
		{
			switch (attributes & System.CodeDom.MemberAttributes.ScopeMask)
			{
			case System.CodeDom.MemberAttributes.Static:
				base.Output.Write("static ");
				break;
			case System.CodeDom.MemberAttributes.Const:
				base.Output.Write("const ");
				break;
			}
		}

		// Token: 0x0600005E RID: 94 RVA: 0x00004E00 File Offset: 0x00003000
		protected override void OutputMemberAccessModifier(System.CodeDom.MemberAttributes attributes)
		{
			System.CodeDom.MemberAttributes memberAttributes = attributes & System.CodeDom.MemberAttributes.AccessMask;
			if (memberAttributes != System.CodeDom.MemberAttributes.Assembly && memberAttributes != System.CodeDom.MemberAttributes.FamilyAndAssembly)
			{
				if (memberAttributes != System.CodeDom.MemberAttributes.Family)
				{
					if (memberAttributes != System.CodeDom.MemberAttributes.FamilyOrAssembly)
					{
						if (memberAttributes != System.CodeDom.MemberAttributes.Private)
						{
							if (memberAttributes == System.CodeDom.MemberAttributes.Public)
							{
								base.Output.Write("public ");
							}
						}
						else
						{
							base.Output.Write("private ");
						}
					}
					else
					{
						base.Output.Write("protected internal ");
					}
				}
				else
				{
					base.Output.Write("protected ");
				}
			}
			else
			{
				base.Output.Write("internal ");
			}
		}

		// Token: 0x0600005F RID: 95 RVA: 0x00004EC8 File Offset: 0x000030C8
		protected override void OutputMemberScopeModifier(System.CodeDom.MemberAttributes attributes)
		{
			switch (attributes & System.CodeDom.MemberAttributes.ScopeMask)
			{
			case System.CodeDom.MemberAttributes.Abstract:
				base.Output.Write("abstract ");
				break;
			case System.CodeDom.MemberAttributes.Final:
				break;
			case System.CodeDom.MemberAttributes.Static:
				base.Output.Write("static ");
				break;
			case System.CodeDom.MemberAttributes.Override:
				base.Output.Write("override ");
				break;
			default:
			{
				System.CodeDom.MemberAttributes memberAttributes = attributes & System.CodeDom.MemberAttributes.AccessMask;
				if (memberAttributes == System.CodeDom.MemberAttributes.Assembly || memberAttributes == System.CodeDom.MemberAttributes.Family || memberAttributes == System.CodeDom.MemberAttributes.Public)
				{
					base.Output.Write("virtual ");
				}
				break;
			}
			}
		}

		// Token: 0x06000060 RID: 96 RVA: 0x00004F7C File Offset: 0x0000317C
		private void OutputTypeAttributes(System.CodeDom.CodeTypeDeclaration declaration)
		{
			TextWriter output = base.Output;
			TypeAttributes typeAttributes = declaration.TypeAttributes;
			switch (typeAttributes & TypeAttributes.VisibilityMask)
			{
			case TypeAttributes.NotPublic:
			case TypeAttributes.NestedAssembly:
			case TypeAttributes.NestedFamANDAssem:
				output.Write("internal ");
				break;
			case TypeAttributes.Public:
			case TypeAttributes.NestedPublic:
				output.Write("public ");
				break;
			case TypeAttributes.NestedPrivate:
				output.Write("private ");
				break;
			case TypeAttributes.NestedFamily:
				output.Write("protected ");
				break;
			case TypeAttributes.VisibilityMask:
				output.Write("protected internal ");
				break;
			}
			if (declaration.IsStruct)
			{
				if (declaration.IsPartial)
				{
					output.Write("partial ");
				}
				output.Write("struct ");
			}
			else if (declaration.IsEnum)
			{
				output.Write("enum ");
			}
			else if ((typeAttributes & TypeAttributes.ClassSemanticsMask) != TypeAttributes.NotPublic)
			{
				if (declaration.IsPartial)
				{
					output.Write("partial ");
				}
				output.Write("interface ");
			}
			else
			{
				if ((typeAttributes & TypeAttributes.Sealed) != TypeAttributes.NotPublic)
				{
					output.Write("sealed ");
				}
				if ((typeAttributes & TypeAttributes.Abstract) != TypeAttributes.NotPublic)
				{
					output.Write("abstract ");
				}
				if (declaration.IsPartial)
				{
					output.Write("partial ");
				}
				output.Write("class ");
			}
		}

		// Token: 0x06000061 RID: 97 RVA: 0x000050E0 File Offset: 0x000032E0
		[MonoTODO("Implement missing special characters")]
		protected override string QuoteSnippetString(string value)
		{
			string text = value.Replace("\\", "\\\\");
			text = text.Replace("\"", "\\\"");
			text = text.Replace("\t", "\\t");
			text = text.Replace("\r", "\\r");
			text = text.Replace("\n", "\\n");
			return "\"" + text + "\"";
		}

		// Token: 0x06000062 RID: 98 RVA: 0x00005154 File Offset: 0x00003354
		protected override void GeneratePrimitiveExpression(System.CodeDom.CodePrimitiveExpression e)
		{
			if (e.Value is char)
			{
				this.GenerateCharValue((char)e.Value);
			}
			else if (e.Value is ushort)
			{
				ushort num = (ushort)e.Value;
				base.Output.Write(num.ToString(CultureInfo.InvariantCulture));
			}
			else if (e.Value is uint)
			{
				uint num2 = (uint)e.Value;
				base.Output.Write(num2.ToString(CultureInfo.InvariantCulture));
				base.Output.Write("u");
			}
			else if (e.Value is ulong)
			{
				ulong num3 = (ulong)e.Value;
				base.Output.Write(num3.ToString(CultureInfo.InvariantCulture));
				base.Output.Write("ul");
			}
			else if (e.Value is sbyte)
			{
				sbyte b = (sbyte)e.Value;
				base.Output.Write(b.ToString(CultureInfo.InvariantCulture));
			}
			else
			{
				base.GeneratePrimitiveExpression(e);
			}
		}

		// Token: 0x06000063 RID: 99 RVA: 0x00005290 File Offset: 0x00003490
		private void GenerateCharValue(char c)
		{
			base.Output.Write('\'');
			switch (c)
			{
			case '\t':
				base.Output.Write("\\t");
				break;
			case '\n':
				base.Output.Write("\\n");
				break;
			default:
				if (c != '\u2028')
				{
					if (c != '\u2029')
					{
						if (c != '\0')
						{
							if (c != '"')
							{
								if (c != '\'')
								{
									if (c != '\\')
									{
										base.Output.Write(c);
									}
									else
									{
										base.Output.Write("\\\\");
									}
								}
								else
								{
									base.Output.Write("\\'");
								}
							}
							else
							{
								base.Output.Write("\\\"");
							}
						}
						else
						{
							base.Output.Write("\\0");
						}
					}
					else
					{
						base.Output.Write("\\u");
						TextWriter output = base.Output;
						int num = (int)c;
						output.Write(num.ToString("X4", CultureInfo.InvariantCulture));
					}
				}
				else
				{
					base.Output.Write("\\u");
					TextWriter output2 = base.Output;
					int num2 = (int)c;
					output2.Write(num2.ToString("X4", CultureInfo.InvariantCulture));
				}
				break;
			case '\r':
				base.Output.Write("\\r");
				break;
			}
			base.Output.Write('\'');
		}

		// Token: 0x06000064 RID: 100 RVA: 0x0000541C File Offset: 0x0000361C
		protected override void GenerateSingleFloatValue(float f)
		{
			base.GenerateSingleFloatValue(f);
			base.Output.Write('F');
		}

		// Token: 0x06000065 RID: 101 RVA: 0x00005434 File Offset: 0x00003634
		protected override void GenerateDecimalValue(decimal d)
		{
			base.GenerateDecimalValue(d);
			base.Output.Write('m');
		}

		// Token: 0x06000066 RID: 102 RVA: 0x0000544C File Offset: 0x0000364C
		protected override void GenerateParameterDeclarationExpression(System.CodeDom.CodeParameterDeclarationExpression e)
		{
			this.OutputAttributes(e.CustomAttributes, null, true);
			this.OutputDirection(e.Direction);
			this.OutputType(e.Type);
			base.Output.Write(' ');
			base.Output.Write(this.GetSafeName(e.Name));
		}

		// Token: 0x06000067 RID: 103 RVA: 0x000054A4 File Offset: 0x000036A4
		protected override void GenerateTypeOfExpression(System.CodeDom.CodeTypeOfExpression e)
		{
			base.Output.Write("typeof(");
			this.OutputType(e.Type);
			base.Output.Write(")");
		}

		// Token: 0x06000068 RID: 104 RVA: 0x000054E0 File Offset: 0x000036E0
		protected override string CreateEscapedIdentifier(string value)
		{
			if (value == null)
			{
				throw new NullReferenceException("Argument identifier is null.");
			}
			return this.GetSafeName(value);
		}

		// Token: 0x06000069 RID: 105 RVA: 0x000054FC File Offset: 0x000036FC
		protected override string CreateValidIdentifier(string value)
		{
			if (value == null)
			{
				throw new NullReferenceException();
			}
			if (CSharpCodeGenerator.keywordsTable == null)
			{
				CSharpCodeGenerator.FillKeywordTable();
			}
			if (CSharpCodeGenerator.keywordsTable.Contains(value))
			{
				return "_" + value;
			}
			return value;
		}

		// Token: 0x0600006A RID: 106 RVA: 0x00005544 File Offset: 0x00003744
		protected override string GetTypeOutput(System.CodeDom.CodeTypeReference type)
		{
			if ((type.Options & System.CodeDom.CodeTypeReferenceOptions.GenericTypeParameter) != (System.CodeDom.CodeTypeReferenceOptions)0)
			{
				return type.BaseType;
			}
			string text;
			if (type.ArrayElementType != null)
			{
				text = this.GetTypeOutput(type.ArrayElementType);
			}
			else
			{
				text = this.DetermineTypeOutput(type);
			}
			int i = type.ArrayRank;
			if (i > 0)
			{
				text += '[';
				for (i--; i > 0; i--)
				{
					text += ',';
				}
				text += ']';
			}
			return text;
		}

		// Token: 0x0600006B RID: 107 RVA: 0x000055DC File Offset: 0x000037DC
		private string DetermineTypeOutput(System.CodeDom.CodeTypeReference type)
		{
			string baseType = type.BaseType;
			string text = baseType.ToLower(CultureInfo.InvariantCulture);
			switch (text)
			{
			case "system.int32":
				return "int";
			case "system.int64":
				return "long";
			case "system.int16":
				return "short";
			case "system.boolean":
				return "bool";
			case "system.char":
				return "char";
			case "system.string":
				return "string";
			case "system.object":
				return "object";
			case "system.void":
				return "void";
			case "system.byte":
				return "byte";
			case "system.sbyte":
				return "sbyte";
			case "system.decimal":
				return "decimal";
			case "system.double":
				return "double";
			case "system.single":
				return "float";
			case "system.uint16":
				return "ushort";
			case "system.uint32":
				return "uint";
			case "system.uint64":
				return "ulong";
			}
			StringBuilder stringBuilder = new StringBuilder(baseType.Length);
			if (type.Options == System.CodeDom.CodeTypeReferenceOptions.GlobalReference)
			{
				stringBuilder.Append("global::");
			}
			int num2 = 0;
			for (int i = 0; i < baseType.Length; i++)
			{
				char c = baseType[i];
				if (c != '+' && c != '.')
				{
					if (c == '`')
					{
						stringBuilder.Append(this.CreateEscapedIdentifier(baseType.Substring(num2, i - num2)));
						i++;
						int num3 = i;
						while (num3 < baseType.Length && char.IsDigit(baseType[num3]))
						{
							num3++;
						}
						int count = int.Parse(baseType.Substring(i, num3 - i));
						this.OutputTypeArguments(type.TypeArguments, stringBuilder, count);
						i = num3;
						if (i < baseType.Length && (baseType[i] == '+' || baseType[i] == '.'))
						{
							stringBuilder.Append('.');
							i++;
						}
						num2 = i;
					}
				}
				else
				{
					stringBuilder.Append(this.CreateEscapedIdentifier(baseType.Substring(num2, i - num2)));
					stringBuilder.Append('.');
					i++;
					num2 = i;
				}
			}
			if (num2 < baseType.Length)
			{
				stringBuilder.Append(this.CreateEscapedIdentifier(baseType.Substring(num2)));
			}
			return stringBuilder.ToString();
		}

		// Token: 0x0600006C RID: 108 RVA: 0x00005978 File Offset: 0x00003B78
		private static bool is_identifier_start_character(char c)
		{
			return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || c == '_' || c == '@' || char.IsLetter(c);
		}

		// Token: 0x0600006D RID: 109 RVA: 0x000059B4 File Offset: 0x00003BB4
		private static bool is_identifier_part_character(char c)
		{
			return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || c == '_' || (c >= '0' && c <= '9') || char.IsLetter(c);
		}

		// Token: 0x0600006E RID: 110 RVA: 0x00005A04 File Offset: 0x00003C04
		protected override bool IsValidIdentifier(string identifier)
		{
			if (identifier == null || identifier.Length == 0)
			{
				return false;
			}
			if (CSharpCodeGenerator.keywordsTable == null)
			{
				CSharpCodeGenerator.FillKeywordTable();
			}
			if (CSharpCodeGenerator.keywordsTable.Contains(identifier))
			{
				return false;
			}
			if (!CSharpCodeGenerator.is_identifier_start_character(identifier[0]))
			{
				return false;
			}
			for (int i = 1; i < identifier.Length; i++)
			{
				if (!CSharpCodeGenerator.is_identifier_part_character(identifier[i]))
				{
					return false;
				}
			}
			return true;
		}

		// Token: 0x0600006F RID: 111 RVA: 0x00005A84 File Offset: 0x00003C84
		protected override bool Supports(System.CodeDom.Compiler.GeneratorSupport supports)
		{
			return true;
		}

		// Token: 0x06000070 RID: 112 RVA: 0x00005A88 File Offset: 0x00003C88
		protected override void GenerateDirectives(System.CodeDom.CodeDirectiveCollection directives)
		{
			foreach (object obj in directives)
			{
				System.CodeDom.CodeDirective codeDirective = (System.CodeDom.CodeDirective)obj;
				if (codeDirective is System.CodeDom.CodeChecksumPragma)
				{
					this.GenerateCodeChecksumPragma((System.CodeDom.CodeChecksumPragma)codeDirective);
				}
				else
				{
					if (!(codeDirective is System.CodeDom.CodeRegionDirective))
					{
						throw new NotImplementedException("Unknown CodeDirective");
					}
					this.GenerateCodeRegionDirective((System.CodeDom.CodeRegionDirective)codeDirective);
				}
			}
		}

		// Token: 0x06000071 RID: 113 RVA: 0x00005B30 File Offset: 0x00003D30
		private void GenerateCodeChecksumPragma(System.CodeDom.CodeChecksumPragma pragma)
		{
			base.Output.Write("#pragma checksum ");
			base.Output.Write(this.QuoteSnippetString(pragma.FileName));
			base.Output.Write(" \"");
			base.Output.Write(pragma.ChecksumAlgorithmId.ToString("B"));
			base.Output.Write("\" \"");
			if (pragma.ChecksumData != null)
			{
				foreach (byte b in pragma.ChecksumData)
				{
					base.Output.Write(b.ToString("X2"));
				}
			}
			base.Output.WriteLine("\"");
		}

		// Token: 0x06000072 RID: 114 RVA: 0x00005BF4 File Offset: 0x00003DF4
		private void GenerateCodeRegionDirective(System.CodeDom.CodeRegionDirective region)
		{
			System.CodeDom.CodeRegionMode regionMode = region.RegionMode;
			if (regionMode == System.CodeDom.CodeRegionMode.Start)
			{
				base.Output.Write("#region ");
				base.Output.WriteLine(region.RegionText);
				return;
			}
			if (regionMode != System.CodeDom.CodeRegionMode.End)
			{
				return;
			}
			base.Output.WriteLine("#endregion");
		}

		// Token: 0x06000073 RID: 115 RVA: 0x00005C50 File Offset: 0x00003E50
		private void GenerateGenericsParameters(System.CodeDom.CodeTypeParameterCollection parameters)
		{
			int count = parameters.Count;
			if (count == 0)
			{
				return;
			}
			base.Output.Write('<');
			for (int i = 0; i < count - 1; i++)
			{
				base.Output.Write(parameters[i].Name);
				base.Output.Write(", ");
			}
			base.Output.Write(parameters[count - 1].Name);
			base.Output.Write('>');
		}

		// Token: 0x06000074 RID: 116 RVA: 0x00005CDC File Offset: 0x00003EDC
		private void GenerateGenericsConstraints(System.CodeDom.CodeTypeParameterCollection parameters)
		{
			int count = parameters.Count;
			if (count == 0)
			{
				return;
			}
			bool flag = false;
			for (int i = 0; i < count; i++)
			{
				System.CodeDom.CodeTypeParameter codeTypeParameter = parameters[i];
				bool flag2 = codeTypeParameter.Constraints.Count != 0;
				base.Output.WriteLine();
				if (flag2 || codeTypeParameter.HasConstructorConstraint)
				{
					if (!flag)
					{
						base.Indent++;
						flag = true;
					}
					base.Output.Write("where ");
					base.Output.Write(codeTypeParameter.Name);
					base.Output.Write(" : ");
					for (int j = 0; j < codeTypeParameter.Constraints.Count; j++)
					{
						if (j > 0)
						{
							base.Output.Write(", ");
						}
						this.OutputType(codeTypeParameter.Constraints[j]);
					}
					if (codeTypeParameter.HasConstructorConstraint)
					{
						if (flag2)
						{
							base.Output.Write(", ");
						}
						base.Output.Write("new");
						if (flag2)
						{
							base.Output.Write(" ");
						}
						base.Output.Write("()");
					}
				}
			}
			if (flag)
			{
				base.Indent--;
			}
		}

		// Token: 0x06000075 RID: 117 RVA: 0x00005E48 File Offset: 0x00004048
		private string GetTypeArguments(System.CodeDom.CodeTypeReferenceCollection collection)
		{
			StringBuilder stringBuilder = new StringBuilder(" <");
			foreach (object obj in collection)
			{
				System.CodeDom.CodeTypeReference type = (System.CodeDom.CodeTypeReference)obj;
				stringBuilder.Append(this.GetTypeOutput(type));
				stringBuilder.Append(", ");
			}
			stringBuilder.Length--;
			stringBuilder[stringBuilder.Length - 1] = '>';
			return stringBuilder.ToString();
		}

		// Token: 0x06000076 RID: 118 RVA: 0x00005EF4 File Offset: 0x000040F4
		private void OutputTypeArguments(System.CodeDom.CodeTypeReferenceCollection typeArguments, StringBuilder sb, int count)
		{
			if (count == 0)
			{
				return;
			}
			if (typeArguments.Count == 0)
			{
				sb.Append("<>");
				return;
			}
			sb.Append('<');
			sb.Append(this.GetTypeOutput(typeArguments[0]));
			for (int i = 1; i < count; i++)
			{
				sb.Append(", ");
				sb.Append(this.GetTypeOutput(typeArguments[i]));
			}
			sb.Append('>');
		}

		// Token: 0x06000077 RID: 119 RVA: 0x00005F78 File Offset: 0x00004178
		private string GetSafeName(string id)
		{
			if (CSharpCodeGenerator.keywordsTable == null)
			{
				CSharpCodeGenerator.FillKeywordTable();
			}
			if (CSharpCodeGenerator.keywordsTable.Contains(id))
			{
				return "@" + id;
			}
			return id;
		}

		// Token: 0x06000078 RID: 120 RVA: 0x00005FB4 File Offset: 0x000041B4
		private static void FillKeywordTable()
		{
			CSharpCodeGenerator.keywordsTable = new Hashtable();
			foreach (string text in CSharpCodeGenerator.keywords)
			{
				CSharpCodeGenerator.keywordsTable.Add(text, text);
			}
		}

		// Token: 0x04000025 RID: 37
		private IDictionary<string, string> providerOptions;

		// Token: 0x04000026 RID: 38
		private bool dont_write_semicolon;

		// Token: 0x04000027 RID: 39
		private static Hashtable keywordsTable;

		// Token: 0x04000028 RID: 40
		private static string[] keywords = new string[]
		{
			"abstract",
			"event",
			"new",
			"struct",
			"as",
			"explicit",
			"null",
			"switch",
			"base",
			"extern",
			"this",
			"false",
			"operator",
			"throw",
			"break",
			"finally",
			"out",
			"true",
			"fixed",
			"override",
			"try",
			"case",
			"params",
			"typeof",
			"catch",
			"for",
			"private",
			"foreach",
			"protected",
			"checked",
			"goto",
			"public",
			"unchecked",
			"class",
			"if",
			"readonly",
			"unsafe",
			"const",
			"implicit",
			"ref",
			"continue",
			"in",
			"return",
			"using",
			"virtual",
			"default",
			"interface",
			"sealed",
			"volatile",
			"delegate",
			"internal",
			"do",
			"is",
			"sizeof",
			"while",
			"lock",
			"stackalloc",
			"else",
			"static",
			"enum",
			"namespace",
			"object",
			"bool",
			"byte",
			"float",
			"uint",
			"char",
			"ulong",
			"ushort",
			"decimal",
			"int",
			"sbyte",
			"short",
			"double",
			"long",
			"string",
			"void",
			"partial",
			"yield",
			"where"
		};
	}
}
