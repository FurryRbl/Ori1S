using System;
using System.CodeDom;
using System.CodeDom.Compiler;
using System.Collections;
using System.Globalization;
using System.IO;
using System.Reflection;
using System.Text;

namespace Microsoft.VisualBasic
{
	// Token: 0x0200000F RID: 15
	internal class VBCodeGenerator : System.CodeDom.Compiler.CodeGenerator
	{
		// Token: 0x17000006 RID: 6
		// (get) Token: 0x06000090 RID: 144 RVA: 0x00006F64 File Offset: 0x00005164
		protected override string NullToken
		{
			get
			{
				return "Nothing";
			}
		}

		// Token: 0x06000091 RID: 145 RVA: 0x00006F6C File Offset: 0x0000516C
		protected override void ContinueOnNewLine(string st)
		{
			base.Output.Write(st);
			base.Output.WriteLine(" _");
		}

		// Token: 0x06000092 RID: 146 RVA: 0x00006F98 File Offset: 0x00005198
		protected override void GenerateBinaryOperatorExpression(System.CodeDom.CodeBinaryOperatorExpression e)
		{
			bool flag = false;
			bool flag2 = false;
			if (e.Operator == System.CodeDom.CodeBinaryOperatorType.IdentityInequality)
			{
				System.CodeDom.CodePrimitiveExpression codePrimitiveExpression = e.Left as System.CodeDom.CodePrimitiveExpression;
				if (codePrimitiveExpression == null)
				{
					codePrimitiveExpression = (e.Right as System.CodeDom.CodePrimitiveExpression);
				}
				else
				{
					flag2 = true;
				}
				flag = (codePrimitiveExpression != null && codePrimitiveExpression.Value == null);
			}
			if (flag)
			{
				TextWriter output = base.Output;
				output.Write("(Not (");
				base.GenerateExpression((!flag2) ? e.Left : e.Right);
				output.Write(") Is ");
				base.GenerateExpression((!flag2) ? e.Right : e.Left);
				output.Write(')');
			}
			else
			{
				base.GenerateBinaryOperatorExpression(e);
			}
		}

		// Token: 0x06000093 RID: 147 RVA: 0x00007060 File Offset: 0x00005260
		protected override void GenerateArrayCreateExpression(System.CodeDom.CodeArrayCreateExpression expression)
		{
			TextWriter output = base.Output;
			output.Write("New ");
			System.CodeDom.CodeExpressionCollection initializers = expression.Initializers;
			System.CodeDom.CodeTypeReference codeTypeReference = expression.CreateType;
			if (initializers.Count > 0)
			{
				this.OutputType(codeTypeReference);
				output.Write("() {");
				base.Indent++;
				this.OutputExpressionList(initializers);
				base.Indent--;
				output.Write("}");
			}
			else
			{
				for (System.CodeDom.CodeTypeReference arrayElementType = codeTypeReference.ArrayElementType; arrayElementType != null; arrayElementType = arrayElementType.ArrayElementType)
				{
					codeTypeReference = arrayElementType;
				}
				this.OutputType(codeTypeReference);
				output.Write("((");
				System.CodeDom.CodeExpression sizeExpression = expression.SizeExpression;
				if (sizeExpression != null)
				{
					base.GenerateExpression(sizeExpression);
				}
				else
				{
					output.Write(expression.Size);
				}
				output.Write(") - 1) {}");
			}
		}

		// Token: 0x06000094 RID: 148 RVA: 0x00007140 File Offset: 0x00005340
		protected override void GenerateBaseReferenceExpression(System.CodeDom.CodeBaseReferenceExpression expression)
		{
			base.Output.Write("MyBase");
		}

		// Token: 0x06000095 RID: 149 RVA: 0x00007154 File Offset: 0x00005354
		protected override void GenerateCastExpression(System.CodeDom.CodeCastExpression expression)
		{
			TextWriter output = base.Output;
			output.Write("CType(");
			base.GenerateExpression(expression.Expression);
			output.Write(", ");
			this.OutputType(expression.TargetType);
			output.Write(")");
		}

		// Token: 0x06000096 RID: 150 RVA: 0x000071A4 File Offset: 0x000053A4
		private bool AsBool(object datavalue)
		{
			return datavalue != null && datavalue is bool && (bool)datavalue;
		}

		// Token: 0x06000097 RID: 151 RVA: 0x000071C0 File Offset: 0x000053C0
		private string OnOff(bool datavalue)
		{
			return (!datavalue) ? "Off" : "On";
		}

		// Token: 0x06000098 RID: 152 RVA: 0x000071D8 File Offset: 0x000053D8
		protected override void GenerateCompileUnitStart(System.CodeDom.CodeCompileUnit compileUnit)
		{
			this.GenerateComment(new System.CodeDom.CodeComment("------------------------------------------------------------------------------"));
			this.GenerateComment(new System.CodeDom.CodeComment(" <autogenerated>"));
			this.GenerateComment(new System.CodeDom.CodeComment("     This code was generated by a tool."));
			this.GenerateComment(new System.CodeDom.CodeComment("     Mono Runtime Version: " + Environment.Version));
			this.GenerateComment(new System.CodeDom.CodeComment(string.Empty));
			this.GenerateComment(new System.CodeDom.CodeComment("     Changes to this file may cause incorrect behavior and will be lost if "));
			this.GenerateComment(new System.CodeDom.CodeComment("     the code is regenerated."));
			this.GenerateComment(new System.CodeDom.CodeComment(" </autogenerated>"));
			this.GenerateComment(new System.CodeDom.CodeComment("------------------------------------------------------------------------------"));
			base.Output.WriteLine();
			if (this.AsBool(compileUnit.UserData["AllowLateBound"]))
			{
				base.Output.WriteLine("Option Explicit {0}", this.OnOff(this.AsBool(compileUnit.UserData["RequireVariableDeclaration"])));
				base.Output.WriteLine("Option Strict Off");
			}
			else
			{
				base.Output.WriteLine("Option Explicit On");
				base.Output.WriteLine("Option Strict On");
			}
			base.Output.WriteLine();
		}

		// Token: 0x06000099 RID: 153 RVA: 0x00007314 File Offset: 0x00005514
		protected override void GenerateCompileUnit(System.CodeDom.CodeCompileUnit compileUnit)
		{
			this.GenerateCompileUnitStart(compileUnit);
			this.OutputAttributes(compileUnit.AssemblyCustomAttributes, "Assembly: ", VBCodeGenerator.LineHandling.NewLine);
			base.GenerateNamespaces(compileUnit);
			this.GenerateCompileUnitEnd(compileUnit);
		}

		// Token: 0x0600009A RID: 154 RVA: 0x00007348 File Offset: 0x00005548
		protected override void GenerateDelegateCreateExpression(System.CodeDom.CodeDelegateCreateExpression expression)
		{
			TextWriter output = base.Output;
			output.Write("AddressOf ");
			System.CodeDom.CodeExpression targetObject = expression.TargetObject;
			if (targetObject != null)
			{
				base.GenerateExpression(targetObject);
				base.Output.Write('.');
			}
			output.Write(expression.MethodName);
		}

		// Token: 0x0600009B RID: 155 RVA: 0x00007394 File Offset: 0x00005594
		protected override void GenerateFieldReferenceExpression(System.CodeDom.CodeFieldReferenceExpression expression)
		{
			System.CodeDom.CodeExpression targetObject = expression.TargetObject;
			if (targetObject != null)
			{
				base.GenerateExpression(targetObject);
				base.Output.Write('.');
			}
			base.Output.Write(this.CreateEscapedIdentifier(expression.FieldName));
		}

		// Token: 0x0600009C RID: 156 RVA: 0x000073DC File Offset: 0x000055DC
		protected override void GenerateArgumentReferenceExpression(System.CodeDom.CodeArgumentReferenceExpression expression)
		{
			base.Output.Write(this.CreateEscapedIdentifier(expression.ParameterName));
		}

		// Token: 0x0600009D RID: 157 RVA: 0x00007400 File Offset: 0x00005600
		protected override void GenerateVariableReferenceExpression(System.CodeDom.CodeVariableReferenceExpression expression)
		{
			base.Output.Write(this.CreateEscapedIdentifier(expression.VariableName));
		}

		// Token: 0x0600009E RID: 158 RVA: 0x00007424 File Offset: 0x00005624
		protected override void GenerateIndexerExpression(System.CodeDom.CodeIndexerExpression expression)
		{
			TextWriter output = base.Output;
			base.GenerateExpression(expression.TargetObject);
			output.Write('(');
			this.OutputExpressionList(expression.Indices);
			output.Write(')');
		}

		// Token: 0x0600009F RID: 159 RVA: 0x00007460 File Offset: 0x00005660
		protected override void GenerateArrayIndexerExpression(System.CodeDom.CodeArrayIndexerExpression expression)
		{
			TextWriter output = base.Output;
			base.GenerateExpression(expression.TargetObject);
			output.Write("(");
			this.OutputExpressionList(expression.Indices);
			output.Write(')');
		}

		// Token: 0x060000A0 RID: 160 RVA: 0x000074A0 File Offset: 0x000056A0
		protected override void GenerateSnippetExpression(System.CodeDom.CodeSnippetExpression expression)
		{
			base.Output.Write(expression.Value);
		}

		// Token: 0x060000A1 RID: 161 RVA: 0x000074B4 File Offset: 0x000056B4
		protected override void GenerateMethodInvokeExpression(System.CodeDom.CodeMethodInvokeExpression expression)
		{
			TextWriter output = base.Output;
			this.GenerateMethodReferenceExpression(expression.Method);
			output.Write('(');
			this.OutputExpressionList(expression.Parameters);
			output.Write(')');
		}

		// Token: 0x060000A2 RID: 162 RVA: 0x000074F0 File Offset: 0x000056F0
		protected override void GenerateMethodReferenceExpression(System.CodeDom.CodeMethodReferenceExpression expression)
		{
			if (expression.TargetObject != null)
			{
				base.GenerateExpression(expression.TargetObject);
				base.Output.Write('.');
			}
			base.Output.Write(this.CreateEscapedIdentifier(expression.MethodName));
		}

		// Token: 0x060000A3 RID: 163 RVA: 0x00007538 File Offset: 0x00005738
		protected override void GenerateEventReferenceExpression(System.CodeDom.CodeEventReferenceExpression expression)
		{
			if (expression.TargetObject != null)
			{
				base.GenerateExpression(expression.TargetObject);
				base.Output.Write('.');
				if (expression.TargetObject is System.CodeDom.CodeThisReferenceExpression)
				{
					base.Output.Write(expression.EventName + "Event");
				}
				else
				{
					base.Output.Write(this.CreateEscapedIdentifier(expression.EventName));
				}
			}
			else
			{
				base.Output.Write(this.CreateEscapedIdentifier(expression.EventName + "Event"));
			}
		}

		// Token: 0x060000A4 RID: 164 RVA: 0x000075D8 File Offset: 0x000057D8
		protected override void GenerateDelegateInvokeExpression(System.CodeDom.CodeDelegateInvokeExpression expression)
		{
			System.CodeDom.CodeEventReferenceExpression codeEventReferenceExpression = expression.TargetObject as System.CodeDom.CodeEventReferenceExpression;
			if (codeEventReferenceExpression != null)
			{
				base.Output.Write("RaiseEvent ");
				if (codeEventReferenceExpression.TargetObject != null && !(codeEventReferenceExpression.TargetObject is System.CodeDom.CodeThisReferenceExpression))
				{
					base.GenerateExpression(codeEventReferenceExpression.TargetObject);
					base.Output.Write(".");
				}
				base.Output.Write(codeEventReferenceExpression.EventName);
			}
			else if (expression.TargetObject != null)
			{
				base.GenerateExpression(expression.TargetObject);
			}
			base.Output.Write('(');
			this.OutputExpressionList(expression.Parameters);
			base.Output.Write(')');
		}

		// Token: 0x060000A5 RID: 165 RVA: 0x00007694 File Offset: 0x00005894
		protected override void GenerateObjectCreateExpression(System.CodeDom.CodeObjectCreateExpression expression)
		{
			base.Output.Write("New ");
			this.OutputType(expression.CreateType);
			base.Output.Write('(');
			this.OutputExpressionList(expression.Parameters);
			base.Output.Write(')');
		}

		// Token: 0x060000A6 RID: 166 RVA: 0x000076E4 File Offset: 0x000058E4
		protected override void GenerateParameterDeclarationExpression(System.CodeDom.CodeParameterDeclarationExpression e)
		{
			this.OutputAttributes(e.CustomAttributes, null, VBCodeGenerator.LineHandling.InLine);
			this.OutputDirection(e.Direction);
			this.OutputTypeNamePair(e.Type, e.Name);
		}

		// Token: 0x060000A7 RID: 167 RVA: 0x00007720 File Offset: 0x00005920
		protected override void GeneratePrimitiveExpression(System.CodeDom.CodePrimitiveExpression e)
		{
			if (e.Value is char)
			{
				char c = (char)e.Value;
				int num = (int)c;
				base.Output.Write("Global.Microsoft.VisualBasic.ChrW(" + num.ToString(CultureInfo.InvariantCulture) + ")");
			}
			else if (e.Value is ushort)
			{
				ushort num2 = (ushort)e.Value;
				base.Output.Write(num2.ToString(CultureInfo.InvariantCulture));
				base.Output.Write("US");
			}
			else if (e.Value is uint)
			{
				uint num3 = (uint)e.Value;
				base.Output.Write(num3.ToString(CultureInfo.InvariantCulture));
				base.Output.Write("UI");
			}
			else if (e.Value is ulong)
			{
				ulong num4 = (ulong)e.Value;
				base.Output.Write(num4.ToString(CultureInfo.InvariantCulture));
				base.Output.Write("UL");
			}
			else if (e.Value is sbyte)
			{
				sbyte b = (sbyte)e.Value;
				base.Output.Write("CSByte(");
				base.Output.Write(b.ToString(CultureInfo.InvariantCulture));
				base.Output.Write(')');
			}
			else
			{
				base.GeneratePrimitiveExpression(e);
			}
		}

		// Token: 0x060000A8 RID: 168 RVA: 0x000078AC File Offset: 0x00005AAC
		protected override void GenerateSingleFloatValue(float s)
		{
			base.GenerateSingleFloatValue(s);
			base.Output.Write('!');
		}

		// Token: 0x060000A9 RID: 169 RVA: 0x000078C4 File Offset: 0x00005AC4
		protected override void GeneratePropertyReferenceExpression(System.CodeDom.CodePropertyReferenceExpression expression)
		{
			if (expression.TargetObject != null)
			{
				this.GenerateMemberReferenceExpression(expression.TargetObject, expression.PropertyName);
			}
			else
			{
				base.Output.Write(this.CreateEscapedIdentifier(expression.PropertyName));
			}
		}

		// Token: 0x060000AA RID: 170 RVA: 0x0000790C File Offset: 0x00005B0C
		protected override void GeneratePropertySetValueReferenceExpression(System.CodeDom.CodePropertySetValueReferenceExpression expression)
		{
			base.Output.Write("Value");
		}

		// Token: 0x060000AB RID: 171 RVA: 0x00007920 File Offset: 0x00005B20
		protected override void GenerateThisReferenceExpression(System.CodeDom.CodeThisReferenceExpression expression)
		{
			base.Output.Write("Me");
		}

		// Token: 0x060000AC RID: 172 RVA: 0x00007934 File Offset: 0x00005B34
		protected override void GenerateExpressionStatement(System.CodeDom.CodeExpressionStatement statement)
		{
			base.GenerateExpression(statement.Expression);
			base.Output.WriteLine();
		}

		// Token: 0x060000AD RID: 173 RVA: 0x00007950 File Offset: 0x00005B50
		protected override void GenerateIterationStatement(System.CodeDom.CodeIterationStatement statement)
		{
			TextWriter output = base.Output;
			base.GenerateStatement(statement.InitStatement);
			output.Write("Do While ");
			base.GenerateExpression(statement.TestExpression);
			output.WriteLine();
			base.Indent++;
			base.GenerateStatements(statement.Statements);
			base.GenerateStatement(statement.IncrementStatement);
			base.Indent--;
			output.WriteLine("Loop");
		}

		// Token: 0x060000AE RID: 174 RVA: 0x000079CC File Offset: 0x00005BCC
		protected override void GenerateThrowExceptionStatement(System.CodeDom.CodeThrowExceptionStatement statement)
		{
			base.Output.Write("Throw");
			if (statement.ToThrow != null)
			{
				base.Output.Write(' ');
				base.GenerateExpression(statement.ToThrow);
			}
			base.Output.WriteLine();
		}

		// Token: 0x060000AF RID: 175 RVA: 0x00007A18 File Offset: 0x00005C18
		protected override void GenerateComment(System.CodeDom.CodeComment comment)
		{
			TextWriter output = base.Output;
			string value;
			if (comment.DocComment)
			{
				value = "'''";
			}
			else
			{
				value = "'";
			}
			output.Write(value);
			string text = comment.Text;
			for (int i = 0; i < text.Length; i++)
			{
				output.Write(text[i]);
				if (text[i] == '\r')
				{
					if (i >= text.Length - 1 || text[i + 1] != '\n')
					{
						output.Write(value);
					}
				}
				else if (text[i] == '\n')
				{
					output.Write(value);
				}
			}
			output.WriteLine();
		}

		// Token: 0x060000B0 RID: 176 RVA: 0x00007AD4 File Offset: 0x00005CD4
		protected override void GenerateMethodReturnStatement(System.CodeDom.CodeMethodReturnStatement statement)
		{
			TextWriter output = base.Output;
			if (statement.Expression != null)
			{
				output.Write("Return ");
				base.GenerateExpression(statement.Expression);
				output.WriteLine();
			}
			else
			{
				output.WriteLine("Return");
			}
		}

		// Token: 0x060000B1 RID: 177 RVA: 0x00007B20 File Offset: 0x00005D20
		protected override void GenerateConditionStatement(System.CodeDom.CodeConditionStatement statement)
		{
			TextWriter output = base.Output;
			output.Write("If ");
			base.GenerateExpression(statement.Condition);
			output.WriteLine(" Then");
			base.Indent++;
			base.GenerateStatements(statement.TrueStatements);
			base.Indent--;
			System.CodeDom.CodeStatementCollection falseStatements = statement.FalseStatements;
			if (falseStatements.Count > 0)
			{
				output.WriteLine("Else");
				base.Indent++;
				base.GenerateStatements(falseStatements);
				base.Indent--;
			}
			else if (base.Options.ElseOnClosing)
			{
				output.WriteLine("Else");
			}
			output.WriteLine("End If");
		}

		// Token: 0x060000B2 RID: 178 RVA: 0x00007BEC File Offset: 0x00005DEC
		protected override void GenerateTryCatchFinallyStatement(System.CodeDom.CodeTryCatchFinallyStatement statement)
		{
			TextWriter output = base.Output;
			output.WriteLine("Try ");
			base.Indent++;
			base.GenerateStatements(statement.TryStatements);
			base.Indent--;
			foreach (object obj in statement.CatchClauses)
			{
				System.CodeDom.CodeCatchClause codeCatchClause = (System.CodeDom.CodeCatchClause)obj;
				output.Write("Catch ");
				this.OutputTypeNamePair(codeCatchClause.CatchExceptionType, codeCatchClause.LocalName);
				output.WriteLine();
				base.Indent++;
				base.GenerateStatements(codeCatchClause.Statements);
				base.Indent--;
			}
			System.CodeDom.CodeStatementCollection finallyStatements = statement.FinallyStatements;
			if (finallyStatements.Count > 0)
			{
				output.WriteLine("Finally");
				base.Indent++;
				base.GenerateStatements(finallyStatements);
				base.Indent--;
			}
			output.WriteLine("End Try");
		}

		// Token: 0x060000B3 RID: 179 RVA: 0x00007D28 File Offset: 0x00005F28
		protected override void GenerateAssignStatement(System.CodeDom.CodeAssignStatement statement)
		{
			TextWriter output = base.Output;
			base.GenerateExpression(statement.Left);
			output.Write(" = ");
			base.GenerateExpression(statement.Right);
			output.WriteLine();
		}

		// Token: 0x060000B4 RID: 180 RVA: 0x00007D68 File Offset: 0x00005F68
		protected override void GenerateAttachEventStatement(System.CodeDom.CodeAttachEventStatement statement)
		{
			TextWriter output = base.Output;
			base.Output.Write("AddHandler ");
			if (statement.Event.TargetObject != null)
			{
				this.GenerateEventReferenceExpression(statement.Event);
			}
			else
			{
				base.Output.Write(this.CreateEscapedIdentifier(statement.Event.EventName));
			}
			base.Output.Write(", ");
			base.GenerateExpression(statement.Listener);
			output.WriteLine();
		}

		// Token: 0x060000B5 RID: 181 RVA: 0x00007DEC File Offset: 0x00005FEC
		protected override void GenerateRemoveEventStatement(System.CodeDom.CodeRemoveEventStatement statement)
		{
			TextWriter output = base.Output;
			base.Output.Write("RemoveHandler ");
			if (statement.Event.TargetObject != null)
			{
				this.GenerateEventReferenceExpression(statement.Event);
			}
			else
			{
				base.Output.Write(this.CreateEscapedIdentifier(statement.Event.EventName));
			}
			base.Output.Write(", ");
			base.GenerateExpression(statement.Listener);
			output.WriteLine();
		}

		// Token: 0x060000B6 RID: 182 RVA: 0x00007E70 File Offset: 0x00006070
		protected override void GenerateGotoStatement(System.CodeDom.CodeGotoStatement statement)
		{
			TextWriter output = base.Output;
			output.Write("goto ");
			output.Write(statement.Label);
			output.WriteLine();
		}

		// Token: 0x060000B7 RID: 183 RVA: 0x00007EA4 File Offset: 0x000060A4
		protected override void GenerateLabeledStatement(System.CodeDom.CodeLabeledStatement statement)
		{
			TextWriter output = base.Output;
			base.Indent--;
			output.WriteLine(statement.Label + ":");
			base.Indent++;
			if (statement.Statement != null)
			{
				base.GenerateStatement(statement.Statement);
			}
		}

		// Token: 0x060000B8 RID: 184 RVA: 0x00007F04 File Offset: 0x00006104
		protected override void GenerateTypeOfExpression(System.CodeDom.CodeTypeOfExpression e)
		{
			TextWriter output = base.Output;
			output.Write("GetType(");
			this.OutputType(e.Type);
			output.Write(")");
		}

		// Token: 0x060000B9 RID: 185 RVA: 0x00007F3C File Offset: 0x0000613C
		protected override void GenerateVariableDeclarationStatement(System.CodeDom.CodeVariableDeclarationStatement statement)
		{
			TextWriter output = base.Output;
			output.Write("Dim ");
			this.OutputTypeNamePair(statement.Type, statement.Name);
			System.CodeDom.CodeExpression initExpression = statement.InitExpression;
			if (initExpression != null)
			{
				output.Write(" = ");
				base.GenerateExpression(initExpression);
			}
			output.WriteLine();
		}

		// Token: 0x060000BA RID: 186 RVA: 0x00007F94 File Offset: 0x00006194
		protected override void GenerateLinePragmaStart(System.CodeDom.CodeLinePragma linePragma)
		{
			base.Output.WriteLine();
			base.Output.Write("#ExternalSource(\"");
			base.Output.Write(linePragma.FileName);
			base.Output.Write("\",");
			base.Output.Write(linePragma.LineNumber);
			base.Output.WriteLine(")");
			base.Output.WriteLine(string.Empty);
		}

		// Token: 0x060000BB RID: 187 RVA: 0x00008010 File Offset: 0x00006210
		protected override void GenerateLinePragmaEnd(System.CodeDom.CodeLinePragma linePragma)
		{
			base.Output.WriteLine("#End ExternalSource");
		}

		// Token: 0x060000BC RID: 188 RVA: 0x00008024 File Offset: 0x00006224
		protected override void GenerateEvent(System.CodeDom.CodeMemberEvent eventRef, System.CodeDom.CodeTypeDeclaration declaration)
		{
			if (base.IsCurrentDelegate || base.IsCurrentEnum)
			{
				return;
			}
			TextWriter output = base.Output;
			this.OutputAttributes(eventRef.CustomAttributes, null, VBCodeGenerator.LineHandling.ContinueLine);
			this.OutputMemberAccessModifier(eventRef.Attributes);
			output.Write("Event ");
			this.OutputTypeNamePair(eventRef.Type, this.GetEventName(eventRef));
			if (eventRef.ImplementationTypes.Count > 0)
			{
				this.OutputImplementationTypes(eventRef.ImplementationTypes, eventRef.Name);
			}
			else if (eventRef.PrivateImplementationType != null)
			{
				output.Write(" Implements ");
				this.OutputType(eventRef.PrivateImplementationType);
				output.Write('.');
				output.Write(eventRef.Name);
			}
			output.WriteLine();
		}

		// Token: 0x060000BD RID: 189 RVA: 0x000080EC File Offset: 0x000062EC
		protected override void GenerateField(System.CodeDom.CodeMemberField field)
		{
			if (base.IsCurrentDelegate || base.IsCurrentInterface)
			{
				return;
			}
			TextWriter output = base.Output;
			this.OutputAttributes(field.CustomAttributes, null, VBCodeGenerator.LineHandling.ContinueLine);
			if (base.IsCurrentEnum)
			{
				output.Write(field.Name);
			}
			else
			{
				System.CodeDom.MemberAttributes attributes = field.Attributes;
				this.OutputMemberAccessModifier(attributes);
				this.OutputVTableModifier(attributes);
				this.OutputFieldScopeModifier(attributes);
				this.OutputTypeNamePair(field.Type, field.Name);
			}
			System.CodeDom.CodeExpression initExpression = field.InitExpression;
			if (initExpression != null)
			{
				output.Write(" = ");
				base.GenerateExpression(initExpression);
			}
			output.WriteLine();
		}

		// Token: 0x060000BE RID: 190 RVA: 0x00008194 File Offset: 0x00006394
		protected override void GenerateSnippetMember(System.CodeDom.CodeSnippetTypeMember member)
		{
			base.Output.Write(member.Text);
		}

		// Token: 0x060000BF RID: 191 RVA: 0x000081A8 File Offset: 0x000063A8
		protected override void GenerateEntryPointMethod(System.CodeDom.CodeEntryPointMethod method, System.CodeDom.CodeTypeDeclaration declaration)
		{
			this.OutputAttributes(method.CustomAttributes, null, VBCodeGenerator.LineHandling.ContinueLine);
			base.Output.WriteLine("Public Shared Sub Main()");
			base.Indent++;
			base.GenerateStatements(method.Statements);
			base.Indent--;
			base.Output.WriteLine("End Sub");
		}

		// Token: 0x060000C0 RID: 192 RVA: 0x0000820C File Offset: 0x0000640C
		[MonoTODO("partially implemented")]
		protected override void GenerateMethod(System.CodeDom.CodeMemberMethod method, System.CodeDom.CodeTypeDeclaration declaration)
		{
			if (base.IsCurrentDelegate || base.IsCurrentEnum)
			{
				return;
			}
			bool flag = method.ReturnType.BaseType == typeof(void).FullName;
			TextWriter output = base.Output;
			this.OutputAttributes(method.CustomAttributes, null, VBCodeGenerator.LineHandling.ContinueLine);
			System.CodeDom.MemberAttributes attributes = method.Attributes;
			if (!base.IsCurrentInterface)
			{
				if (method.PrivateImplementationType == null)
				{
					this.OutputMemberAccessModifier(attributes);
					if (this.IsOverloaded(method, declaration))
					{
						output.Write("Overloads ");
					}
				}
				this.OutputVTableModifier(attributes);
				this.OutputMemberScopeModifier(attributes);
			}
			else
			{
				this.OutputVTableModifier(attributes);
			}
			if (flag)
			{
				output.Write("Sub ");
			}
			else
			{
				output.Write("Function ");
			}
			output.Write(this.GetMethodName(method));
			this.OutputTypeParameters(method.TypeParameters);
			output.Write('(');
			this.OutputParameters(method.Parameters);
			output.Write(')');
			if (!flag)
			{
				output.Write(" As ");
				this.OutputAttributes(method.ReturnTypeCustomAttributes, null, VBCodeGenerator.LineHandling.InLine);
				this.OutputType(method.ReturnType);
			}
			if (method.ImplementationTypes.Count > 0)
			{
				this.OutputImplementationTypes(method.ImplementationTypes, method.Name);
			}
			else if (method.PrivateImplementationType != null)
			{
				output.Write(" Implements ");
				this.OutputType(method.PrivateImplementationType);
				output.Write('.');
				output.Write(method.Name);
			}
			output.WriteLine();
			if (!base.IsCurrentInterface && (attributes & System.CodeDom.MemberAttributes.ScopeMask) != System.CodeDom.MemberAttributes.Abstract)
			{
				base.Indent++;
				base.GenerateStatements(method.Statements);
				base.Indent--;
				if (flag)
				{
					output.WriteLine("End Sub");
				}
				else
				{
					output.WriteLine("End Function");
				}
			}
		}

		// Token: 0x060000C1 RID: 193 RVA: 0x00008400 File Offset: 0x00006600
		protected override void GenerateProperty(System.CodeDom.CodeMemberProperty property, System.CodeDom.CodeTypeDeclaration declaration)
		{
			if (base.IsCurrentDelegate || base.IsCurrentEnum)
			{
				return;
			}
			TextWriter output = base.Output;
			this.OutputAttributes(property.CustomAttributes, null, VBCodeGenerator.LineHandling.ContinueLine);
			System.CodeDom.MemberAttributes attributes = property.Attributes;
			if (!base.IsCurrentInterface)
			{
				if (property.PrivateImplementationType == null)
				{
					this.OutputMemberAccessModifier(attributes);
					if (this.IsOverloaded(property, declaration))
					{
						output.Write("Overloads ");
					}
				}
				this.OutputVTableModifier(attributes);
				this.OutputMemberScopeModifier(attributes);
			}
			else
			{
				this.OutputVTableModifier(attributes);
			}
			if (string.Compare(this.GetPropertyName(property), "Item", true, CultureInfo.InvariantCulture) == 0 && property.Parameters.Count > 0)
			{
				output.Write("Default ");
			}
			if (property.HasGet && !property.HasSet)
			{
				output.Write("ReadOnly ");
			}
			if (property.HasSet && !property.HasGet)
			{
				output.Write("WriteOnly ");
			}
			output.Write("Property ");
			base.Output.Write(this.GetPropertyName(property));
			base.Output.Write('(');
			this.OutputParameters(property.Parameters);
			base.Output.Write(')');
			base.Output.Write(" As ");
			base.Output.Write(this.GetTypeOutput(property.Type));
			if (property.ImplementationTypes.Count > 0)
			{
				this.OutputImplementationTypes(property.ImplementationTypes, property.Name);
			}
			else if (property.PrivateImplementationType != null)
			{
				output.Write(" Implements ");
				this.OutputType(property.PrivateImplementationType);
				output.Write('.');
				output.Write(property.Name);
			}
			output.WriteLine();
			if (!base.IsCurrentInterface)
			{
				base.Indent++;
				if (property.HasGet)
				{
					output.WriteLine("Get");
					if (!VBCodeGenerator.IsAbstract(property.Attributes))
					{
						base.Indent++;
						base.GenerateStatements(property.GetStatements);
						base.Indent--;
						output.WriteLine("End Get");
					}
				}
				if (property.HasSet)
				{
					output.WriteLine("Set");
					if (!VBCodeGenerator.IsAbstract(property.Attributes))
					{
						base.Indent++;
						base.GenerateStatements(property.SetStatements);
						base.Indent--;
						output.WriteLine("End Set");
					}
				}
				base.Indent--;
				output.WriteLine("End Property");
			}
		}

		// Token: 0x060000C2 RID: 194 RVA: 0x000086BC File Offset: 0x000068BC
		protected override void GenerateConstructor(System.CodeDom.CodeConstructor constructor, System.CodeDom.CodeTypeDeclaration declaration)
		{
			if (base.IsCurrentDelegate || base.IsCurrentEnum || base.IsCurrentInterface)
			{
				return;
			}
			this.OutputAttributes(constructor.CustomAttributes, null, VBCodeGenerator.LineHandling.ContinueLine);
			this.OutputMemberAccessModifier(constructor.Attributes);
			base.Output.Write("Sub New(");
			this.OutputParameters(constructor.Parameters);
			base.Output.WriteLine(")");
			base.Indent++;
			System.CodeDom.CodeExpressionCollection codeExpressionCollection = constructor.ChainedConstructorArgs;
			if (codeExpressionCollection.Count > 0)
			{
				base.Output.Write("Me.New(");
				this.OutputExpressionList(codeExpressionCollection);
				base.Output.WriteLine(")");
			}
			else
			{
				codeExpressionCollection = constructor.BaseConstructorArgs;
				if (codeExpressionCollection.Count > 0)
				{
					base.Output.Write("MyBase.New(");
					this.OutputExpressionList(codeExpressionCollection);
					base.Output.WriteLine(")");
				}
				else if (base.IsCurrentClass)
				{
					base.Output.WriteLine("MyBase.New");
				}
			}
			base.GenerateStatements(constructor.Statements);
			base.Indent--;
			base.Output.WriteLine("End Sub");
		}

		// Token: 0x060000C3 RID: 195 RVA: 0x00008804 File Offset: 0x00006A04
		protected override void GenerateTypeConstructor(System.CodeDom.CodeTypeConstructor constructor)
		{
			if (base.IsCurrentDelegate || base.IsCurrentEnum || base.IsCurrentInterface)
			{
				return;
			}
			this.OutputAttributes(constructor.CustomAttributes, null, VBCodeGenerator.LineHandling.ContinueLine);
			base.Output.WriteLine("Shared Sub New()");
			base.Indent++;
			base.GenerateStatements(constructor.Statements);
			base.Indent--;
			base.Output.WriteLine("End Sub");
		}

		// Token: 0x060000C4 RID: 196 RVA: 0x0000888C File Offset: 0x00006A8C
		[MonoTODO("partially implemented")]
		protected override void GenerateTypeStart(System.CodeDom.CodeTypeDeclaration declaration)
		{
			TextWriter output = base.Output;
			this.OutputAttributes(declaration.CustomAttributes, null, VBCodeGenerator.LineHandling.ContinueLine);
			TypeAttributes typeAttributes = declaration.TypeAttributes;
			if (base.IsCurrentDelegate)
			{
				System.CodeDom.CodeTypeDelegate codeTypeDelegate = (System.CodeDom.CodeTypeDelegate)declaration;
				if ((typeAttributes & TypeAttributes.VisibilityMask) == TypeAttributes.Public)
				{
					output.Write("Public ");
				}
				bool flag = codeTypeDelegate.ReturnType.BaseType == typeof(void).FullName;
				if (flag)
				{
					output.Write("Delegate Sub ");
				}
				else
				{
					output.Write("Delegate Function ");
				}
				output.Write(this.CreateEscapedIdentifier(codeTypeDelegate.Name));
				this.OutputTypeParameters(codeTypeDelegate.TypeParameters);
				output.Write("(");
				this.OutputParameters(codeTypeDelegate.Parameters);
				base.Output.Write(")");
				if (!flag)
				{
					base.Output.Write(" As ");
					this.OutputType(codeTypeDelegate.ReturnType);
				}
				base.Output.WriteLine(string.Empty);
			}
			else
			{
				this.OutputTypeAttributes(declaration);
				output.Write(this.CreateEscapedIdentifier(declaration.Name));
				this.OutputTypeParameters(declaration.TypeParameters);
				if (base.IsCurrentEnum)
				{
					if (declaration.BaseTypes.Count > 0)
					{
						output.Write(" As ");
						this.OutputType(declaration.BaseTypes[0]);
					}
					output.WriteLine();
					base.Indent++;
				}
				else
				{
					base.Indent++;
					bool flag2 = true;
					bool flag3 = true;
					for (int i = 0; i < declaration.BaseTypes.Count; i++)
					{
						System.CodeDom.CodeTypeReference codeTypeReference = declaration.BaseTypes[i];
						if (flag2 && !declaration.IsStruct && !codeTypeReference.IsInterface)
						{
							output.WriteLine();
							output.Write("Inherits ");
							flag2 = false;
						}
						else if (!declaration.IsInterface && flag3)
						{
							output.WriteLine();
							output.Write("Implements ");
							flag3 = false;
						}
						else
						{
							output.Write(", ");
						}
						this.OutputType(codeTypeReference);
					}
					output.WriteLine();
				}
			}
		}

		// Token: 0x060000C5 RID: 197 RVA: 0x00008AD0 File Offset: 0x00006CD0
		protected override void GenerateTypeEnd(System.CodeDom.CodeTypeDeclaration declaration)
		{
			if (base.IsCurrentDelegate)
			{
				return;
			}
			string value = string.Empty;
			base.Indent--;
			if (declaration.IsStruct)
			{
				value = "End Structure";
			}
			if (declaration.IsInterface)
			{
				value = "End Interface";
			}
			if (declaration.IsEnum)
			{
				value = "End Enum";
			}
			if (declaration.IsClass)
			{
				value = "End Class";
			}
			base.Output.WriteLine(value);
		}

		// Token: 0x060000C6 RID: 198 RVA: 0x00008B50 File Offset: 0x00006D50
		protected override void GenerateNamespace(System.CodeDom.CodeNamespace ns)
		{
			base.GenerateNamespaceImports(ns);
			base.Output.WriteLine();
			this.GenerateCommentStatements(ns.Comments);
			this.GenerateNamespaceStart(ns);
			base.GenerateTypes(ns);
			this.GenerateNamespaceEnd(ns);
		}

		// Token: 0x060000C7 RID: 199 RVA: 0x00008B90 File Offset: 0x00006D90
		protected override void GenerateNamespaceStart(System.CodeDom.CodeNamespace ns)
		{
			TextWriter output = base.Output;
			string name = ns.Name;
			if (name != null && name != string.Empty)
			{
				output.Write("Namespace ");
				output.WriteLine(name);
				base.Indent++;
			}
		}

		// Token: 0x060000C8 RID: 200 RVA: 0x00008BE4 File Offset: 0x00006DE4
		protected override void GenerateNamespaceEnd(System.CodeDom.CodeNamespace ns)
		{
			string name = ns.Name;
			if (name != null && name != string.Empty)
			{
				base.Indent--;
				base.Output.WriteLine("End Namespace");
			}
		}

		// Token: 0x060000C9 RID: 201 RVA: 0x00008C2C File Offset: 0x00006E2C
		protected override void GenerateNamespaceImport(System.CodeDom.CodeNamespaceImport import)
		{
			TextWriter output = base.Output;
			output.Write("Imports ");
			output.Write(import.Namespace);
			output.WriteLine();
		}

		// Token: 0x060000CA RID: 202 RVA: 0x00008C60 File Offset: 0x00006E60
		protected override void GenerateAttributeDeclarationsStart(System.CodeDom.CodeAttributeDeclarationCollection attributes)
		{
			base.Output.Write('<');
		}

		// Token: 0x060000CB RID: 203 RVA: 0x00008C70 File Offset: 0x00006E70
		protected override void GenerateAttributeDeclarationsEnd(System.CodeDom.CodeAttributeDeclarationCollection attributes)
		{
			base.Output.Write(">");
		}

		// Token: 0x060000CC RID: 204 RVA: 0x00008C84 File Offset: 0x00006E84
		private void OutputAttributes(System.CodeDom.CodeAttributeDeclarationCollection attributes, string prefix, VBCodeGenerator.LineHandling lineHandling)
		{
			if (attributes.Count == 0)
			{
				return;
			}
			this.GenerateAttributeDeclarationsStart(attributes);
			IEnumerator enumerator = attributes.GetEnumerator();
			if (enumerator.MoveNext())
			{
				System.CodeDom.CodeAttributeDeclaration attribute = (System.CodeDom.CodeAttributeDeclaration)enumerator.Current;
				if (prefix != null)
				{
					base.Output.Write(prefix);
				}
				this.OutputAttributeDeclaration(attribute);
				while (enumerator.MoveNext())
				{
					base.Output.Write(", ");
					if (lineHandling != VBCodeGenerator.LineHandling.InLine)
					{
						this.ContinueOnNewLine(string.Empty);
						base.Output.Write(" ");
					}
					attribute = (System.CodeDom.CodeAttributeDeclaration)enumerator.Current;
					if (prefix != null)
					{
						base.Output.Write(prefix);
					}
					this.OutputAttributeDeclaration(attribute);
				}
			}
			this.GenerateAttributeDeclarationsEnd(attributes);
			base.Output.Write(" ");
			if (lineHandling != VBCodeGenerator.LineHandling.ContinueLine)
			{
				if (lineHandling == VBCodeGenerator.LineHandling.NewLine)
				{
					base.Output.WriteLine();
				}
			}
			else
			{
				this.ContinueOnNewLine(string.Empty);
			}
		}

		// Token: 0x060000CD RID: 205 RVA: 0x00008D90 File Offset: 0x00006F90
		protected override void OutputAttributeArgument(System.CodeDom.CodeAttributeArgument argument)
		{
			string name = argument.Name;
			if (name != null && name.Length > 0)
			{
				base.Output.Write(name);
				base.Output.Write(":=");
			}
			base.GenerateExpression(argument.Value);
		}

		// Token: 0x060000CE RID: 206 RVA: 0x00008DE0 File Offset: 0x00006FE0
		private void OutputAttributeDeclaration(System.CodeDom.CodeAttributeDeclaration attribute)
		{
			base.Output.Write(attribute.Name.Replace('+', '.'));
			base.Output.Write('(');
			IEnumerator enumerator = attribute.Arguments.GetEnumerator();
			if (enumerator.MoveNext())
			{
				System.CodeDom.CodeAttributeArgument argument = (System.CodeDom.CodeAttributeArgument)enumerator.Current;
				this.OutputAttributeArgument(argument);
				while (enumerator.MoveNext())
				{
					base.Output.Write(", ");
					argument = (System.CodeDom.CodeAttributeArgument)enumerator.Current;
					this.OutputAttributeArgument(argument);
				}
			}
			base.Output.Write(')');
		}

		// Token: 0x060000CF RID: 207 RVA: 0x00008E80 File Offset: 0x00007080
		protected override void OutputDirection(System.CodeDom.FieldDirection direction)
		{
			switch (direction)
			{
			case System.CodeDom.FieldDirection.In:
				base.Output.Write("ByVal ");
				break;
			case System.CodeDom.FieldDirection.Out:
			case System.CodeDom.FieldDirection.Ref:
				base.Output.Write("ByRef ");
				break;
			}
		}

		// Token: 0x060000D0 RID: 208 RVA: 0x00008ED0 File Offset: 0x000070D0
		protected override void OutputFieldScopeModifier(System.CodeDom.MemberAttributes attributes)
		{
			switch (attributes & System.CodeDom.MemberAttributes.ScopeMask)
			{
			case System.CodeDom.MemberAttributes.Static:
				base.Output.Write("Shared ");
				break;
			case System.CodeDom.MemberAttributes.Const:
				base.Output.Write("Const ");
				break;
			}
		}

		// Token: 0x060000D1 RID: 209 RVA: 0x00008F28 File Offset: 0x00007128
		private void OutputImplementationTypes(System.CodeDom.CodeTypeReferenceCollection implementationTypes, string member)
		{
			IEnumerator enumerator = implementationTypes.GetEnumerator();
			if (enumerator.MoveNext())
			{
				base.Output.Write(" Implements ");
				System.CodeDom.CodeTypeReference type = (System.CodeDom.CodeTypeReference)enumerator.Current;
				this.OutputType(type);
				base.Output.Write('.');
				this.OutputIdentifier(member);
				while (enumerator.MoveNext())
				{
					base.Output.Write(" , ");
					type = (System.CodeDom.CodeTypeReference)enumerator.Current;
					this.OutputType(type);
					base.Output.Write('.');
					this.OutputIdentifier(member);
				}
			}
		}

		// Token: 0x060000D2 RID: 210 RVA: 0x00008FC8 File Offset: 0x000071C8
		protected override void OutputMemberAccessModifier(System.CodeDom.MemberAttributes attributes)
		{
			System.CodeDom.MemberAttributes memberAttributes = attributes & System.CodeDom.MemberAttributes.AccessMask;
			if (memberAttributes != System.CodeDom.MemberAttributes.Assembly && memberAttributes != System.CodeDom.MemberAttributes.FamilyAndAssembly)
			{
				if (memberAttributes != System.CodeDom.MemberAttributes.Family)
				{
					if (memberAttributes != System.CodeDom.MemberAttributes.FamilyOrAssembly)
					{
						if (memberAttributes != System.CodeDom.MemberAttributes.Private)
						{
							if (memberAttributes == System.CodeDom.MemberAttributes.Public)
							{
								base.Output.Write("Public ");
							}
						}
						else
						{
							base.Output.Write("Private ");
						}
					}
					else
					{
						base.Output.Write("Protected Friend ");
					}
				}
				else
				{
					base.Output.Write("Protected ");
				}
			}
			else
			{
				base.Output.Write("Friend ");
			}
		}

		// Token: 0x060000D3 RID: 211 RVA: 0x00009090 File Offset: 0x00007290
		private void OutputVTableModifier(System.CodeDom.MemberAttributes attributes)
		{
			if ((attributes & System.CodeDom.MemberAttributes.VTableMask) == System.CodeDom.MemberAttributes.New)
			{
				base.Output.Write("Shadows ");
			}
		}

		// Token: 0x060000D4 RID: 212 RVA: 0x000090B0 File Offset: 0x000072B0
		protected override void OutputMemberScopeModifier(System.CodeDom.MemberAttributes attributes)
		{
			System.CodeDom.MemberAttributes memberAttributes = attributes & System.CodeDom.MemberAttributes.ScopeMask;
			switch (memberAttributes)
			{
			case System.CodeDom.MemberAttributes.Abstract:
				base.Output.Write("MustOverride ");
				break;
			case System.CodeDom.MemberAttributes.Final:
				break;
			case System.CodeDom.MemberAttributes.Static:
				base.Output.Write("Shared ");
				break;
			case System.CodeDom.MemberAttributes.Override:
				base.Output.Write("Overrides ");
				break;
			default:
				if (memberAttributes != System.CodeDom.MemberAttributes.Overloaded)
				{
					System.CodeDom.MemberAttributes memberAttributes2 = attributes & System.CodeDom.MemberAttributes.AccessMask;
					if (memberAttributes2 == System.CodeDom.MemberAttributes.Public || memberAttributes2 == System.CodeDom.MemberAttributes.Family || memberAttributes2 == System.CodeDom.MemberAttributes.Assembly)
					{
						base.Output.Write("Overridable ");
					}
				}
				else
				{
					base.Output.Write("Overloads ");
					System.CodeDom.MemberAttributes memberAttributes3 = attributes & System.CodeDom.MemberAttributes.AccessMask;
					if (memberAttributes3 == System.CodeDom.MemberAttributes.Public || memberAttributes3 == System.CodeDom.MemberAttributes.Family)
					{
						base.Output.Write("Overridable ");
					}
				}
				break;
			}
		}

		// Token: 0x060000D5 RID: 213 RVA: 0x000091B0 File Offset: 0x000073B0
		protected override void OutputOperator(System.CodeDom.CodeBinaryOperatorType op)
		{
			switch (op)
			{
			case System.CodeDom.CodeBinaryOperatorType.Add:
				base.Output.Write("+");
				break;
			case System.CodeDom.CodeBinaryOperatorType.Subtract:
				base.Output.Write("-");
				break;
			case System.CodeDom.CodeBinaryOperatorType.Multiply:
				base.Output.Write("*");
				break;
			case System.CodeDom.CodeBinaryOperatorType.Divide:
				base.Output.Write("/");
				break;
			case System.CodeDom.CodeBinaryOperatorType.Modulus:
				base.Output.Write("Mod");
				break;
			case System.CodeDom.CodeBinaryOperatorType.Assign:
				base.Output.Write("=");
				break;
			case System.CodeDom.CodeBinaryOperatorType.IdentityInequality:
				base.Output.Write("<>");
				break;
			case System.CodeDom.CodeBinaryOperatorType.IdentityEquality:
				base.Output.Write("Is");
				break;
			case System.CodeDom.CodeBinaryOperatorType.ValueEquality:
				base.Output.Write("=");
				break;
			case System.CodeDom.CodeBinaryOperatorType.BitwiseOr:
				base.Output.Write("Or");
				break;
			case System.CodeDom.CodeBinaryOperatorType.BitwiseAnd:
				base.Output.Write("And");
				break;
			case System.CodeDom.CodeBinaryOperatorType.BooleanOr:
				base.Output.Write("OrElse");
				break;
			case System.CodeDom.CodeBinaryOperatorType.BooleanAnd:
				base.Output.Write("AndAlso");
				break;
			case System.CodeDom.CodeBinaryOperatorType.LessThan:
				base.Output.Write("<");
				break;
			case System.CodeDom.CodeBinaryOperatorType.LessThanOrEqual:
				base.Output.Write("<=");
				break;
			case System.CodeDom.CodeBinaryOperatorType.GreaterThan:
				base.Output.Write(">");
				break;
			case System.CodeDom.CodeBinaryOperatorType.GreaterThanOrEqual:
				base.Output.Write(">=");
				break;
			}
		}

		// Token: 0x060000D6 RID: 214 RVA: 0x00009374 File Offset: 0x00007574
		private void OutputTypeAttributes(System.CodeDom.CodeTypeDeclaration declaration)
		{
			TextWriter output = base.Output;
			TypeAttributes typeAttributes = declaration.TypeAttributes;
			if (declaration.IsPartial)
			{
				output.Write("Partial ");
			}
			switch (typeAttributes & TypeAttributes.VisibilityMask)
			{
			case TypeAttributes.NotPublic:
			case TypeAttributes.NestedAssembly:
			case TypeAttributes.NestedFamANDAssem:
				output.Write("Friend ");
				break;
			case TypeAttributes.Public:
			case TypeAttributes.NestedPublic:
				output.Write("Public ");
				break;
			case TypeAttributes.NestedPrivate:
				output.Write("Private ");
				break;
			case TypeAttributes.NestedFamily:
				output.Write("Protected ");
				break;
			case TypeAttributes.VisibilityMask:
				output.Write("Protected Friend ");
				break;
			}
			if (declaration.IsStruct)
			{
				output.Write("Structure ");
			}
			else if (declaration.IsEnum)
			{
				output.Write("Enum ");
			}
			else if ((typeAttributes & TypeAttributes.ClassSemanticsMask) != TypeAttributes.NotPublic)
			{
				output.Write("Interface ");
			}
			else
			{
				if ((typeAttributes & TypeAttributes.Sealed) != TypeAttributes.NotPublic)
				{
					output.Write("NotInheritable ");
				}
				if ((typeAttributes & TypeAttributes.Abstract) != TypeAttributes.NotPublic)
				{
					output.Write("MustInherit ");
				}
				output.Write("Class ");
			}
		}

		// Token: 0x060000D7 RID: 215 RVA: 0x000094AC File Offset: 0x000076AC
		private void OutputTypeParameters(System.CodeDom.CodeTypeParameterCollection parameters)
		{
			int count = parameters.Count;
			if (count == 0)
			{
				return;
			}
			base.Output.Write("(Of ");
			for (int i = 0; i < count; i++)
			{
				if (i > 0)
				{
					base.Output.Write(", ");
				}
				System.CodeDom.CodeTypeParameter codeTypeParameter = parameters[i];
				base.Output.Write(codeTypeParameter.Name);
				this.OutputTypeParameterConstraints(codeTypeParameter);
			}
			base.Output.Write(')');
		}

		// Token: 0x060000D8 RID: 216 RVA: 0x00009530 File Offset: 0x00007730
		private void OutputTypeParameterConstraints(System.CodeDom.CodeTypeParameter parameter)
		{
			int num = parameter.Constraints.Count + ((!parameter.HasConstructorConstraint) ? 0 : 1);
			if (num == 0)
			{
				return;
			}
			base.Output.Write(" As ");
			if (num > 1)
			{
				base.Output.Write(" {");
			}
			for (int i = 0; i < parameter.Constraints.Count; i++)
			{
				if (i > 0)
				{
					base.Output.Write(", ");
				}
				this.OutputType(parameter.Constraints[i]);
			}
			if (parameter.HasConstructorConstraint)
			{
				if (num > 1)
				{
					base.Output.Write(", ");
				}
				base.Output.Write("New");
			}
			if (num > 1)
			{
				base.Output.Write("}");
			}
		}

		// Token: 0x060000D9 RID: 217 RVA: 0x00009618 File Offset: 0x00007818
		protected override void OutputTypeNamePair(System.CodeDom.CodeTypeReference typeRef, string name)
		{
			if (name.Length == 0)
			{
				name = "__exception";
			}
			base.Output.Write(this.CreateEscapedIdentifier(name) + " As " + this.GetTypeOutput(typeRef));
		}

		// Token: 0x060000DA RID: 218 RVA: 0x0000965C File Offset: 0x0000785C
		protected override void OutputType(System.CodeDom.CodeTypeReference type)
		{
			base.Output.Write(this.GetTypeOutput(type));
		}

		// Token: 0x060000DB RID: 219 RVA: 0x00009670 File Offset: 0x00007870
		protected override string QuoteSnippetString(string value)
		{
			StringBuilder stringBuilder = new StringBuilder(value.Length);
			stringBuilder.Append("\"");
			bool flag = true;
			for (int i = 0; i < value.Length; i++)
			{
				if (value[i] == '"')
				{
					if (!flag)
					{
						stringBuilder.Append("&\"");
						flag = true;
					}
					stringBuilder.Append(value[i]);
					stringBuilder.Append(value[i]);
				}
				else if (value[i] >= ' ')
				{
					if (!flag)
					{
						stringBuilder.Append("&\"");
						flag = true;
					}
					stringBuilder.Append(value[i]);
				}
				else
				{
					if (flag)
					{
						stringBuilder.Append("\"");
						flag = false;
					}
					stringBuilder.Append("&Microsoft.VisualBasic.ChrW(");
					stringBuilder.Append((int)value[i]);
					stringBuilder.Append(")");
				}
			}
			if (flag)
			{
				stringBuilder.Append("\"");
			}
			return stringBuilder.ToString();
		}

		// Token: 0x060000DC RID: 220 RVA: 0x00009778 File Offset: 0x00007978
		private void GenerateMemberReferenceExpression(System.CodeDom.CodeExpression targetObject, string memberName)
		{
			base.GenerateExpression(targetObject);
			base.Output.Write('.');
			base.Output.Write(memberName);
		}

		// Token: 0x060000DD RID: 221 RVA: 0x000097A8 File Offset: 0x000079A8
		protected override string CreateEscapedIdentifier(string value)
		{
			for (int i = 0; i < this.Keywords.Length; i++)
			{
				if (value.ToLower().Equals(this.Keywords[i].ToLower()))
				{
					return "[" + value + "]";
				}
			}
			return value;
		}

		// Token: 0x060000DE RID: 222 RVA: 0x00009800 File Offset: 0x00007A00
		protected override string CreateValidIdentifier(string value)
		{
			for (int i = 0; i < this.Keywords.Length; i++)
			{
				if (value.ToLower().Equals(this.Keywords[i].ToLower()))
				{
					return "_" + value;
				}
			}
			return value;
		}

		// Token: 0x060000DF RID: 223 RVA: 0x00009850 File Offset: 0x00007A50
		protected override string GetTypeOutput(System.CodeDom.CodeTypeReference type)
		{
			System.CodeDom.CodeTypeReference arrayElementType = type.ArrayElementType;
			string text;
			if (arrayElementType != null)
			{
				text = this.GetTypeOutput(arrayElementType);
			}
			else
			{
				string baseType = type.BaseType;
				switch (baseType)
				{
				case "System.DateTime":
					text = "Date";
					goto IL_243;
				case "System.Decimal":
					text = "Decimal";
					goto IL_243;
				case "System.Double":
					text = "Double";
					goto IL_243;
				case "System.Single":
					text = "Single";
					goto IL_243;
				case "System.Byte":
					text = "Byte";
					goto IL_243;
				case "System.Int32":
					text = "Integer";
					goto IL_243;
				case "System.Int64":
					text = "Long";
					goto IL_243;
				case "System.Int16":
					text = "Short";
					goto IL_243;
				case "System.Boolean":
					text = "Boolean";
					goto IL_243;
				case "System.Char":
					text = "Char";
					goto IL_243;
				case "System.String":
					text = "String";
					goto IL_243;
				case "System.Object":
					text = "Object";
					goto IL_243;
				case "System.SByte":
					text = "SByte";
					goto IL_243;
				case "System.UInt16":
					text = "UShort";
					goto IL_243;
				case "System.UInt32":
					text = "UInteger";
					goto IL_243;
				case "System.UInt64":
					text = "ULong";
					goto IL_243;
				}
				text = type.BaseType.Replace('+', '.');
				text = this.CreateEscapedIdentifier(text);
			}
			IL_243:
			int i = type.ArrayRank;
			if (i > 0)
			{
				text += "(";
				for (i--; i > 0; i--)
				{
					text += ",";
				}
				text += ")";
			}
			return text;
		}

		// Token: 0x060000E0 RID: 224 RVA: 0x00009AE8 File Offset: 0x00007CE8
		protected override bool IsValidIdentifier(string identifier)
		{
			for (int i = 0; i < this.Keywords.Length; i++)
			{
				if (identifier.ToLower().Equals(this.Keywords[i].ToLower()))
				{
					return false;
				}
			}
			return true;
		}

		// Token: 0x060000E1 RID: 225 RVA: 0x00009B30 File Offset: 0x00007D30
		protected override bool Supports(System.CodeDom.Compiler.GeneratorSupport supports)
		{
			return true;
		}

		// Token: 0x060000E2 RID: 226 RVA: 0x00009B34 File Offset: 0x00007D34
		private bool IsOverloaded(System.CodeDom.CodeMemberProperty property, System.CodeDom.CodeTypeDeclaration type)
		{
			if ((property.Attributes & System.CodeDom.MemberAttributes.Overloaded) == System.CodeDom.MemberAttributes.Overloaded)
			{
				return true;
			}
			foreach (object obj in type.Members)
			{
				System.CodeDom.CodeTypeMember codeTypeMember = (System.CodeDom.CodeTypeMember)obj;
				System.CodeDom.CodeMemberProperty codeMemberProperty = codeTypeMember as System.CodeDom.CodeMemberProperty;
				if (codeMemberProperty != null)
				{
					if (codeMemberProperty != property && codeMemberProperty.Name == property.Name && codeMemberProperty.PrivateImplementationType == null)
					{
						return true;
					}
				}
			}
			return false;
		}

		// Token: 0x060000E3 RID: 227 RVA: 0x00009BFC File Offset: 0x00007DFC
		private bool IsOverloaded(System.CodeDom.CodeMemberMethod method, System.CodeDom.CodeTypeDeclaration type)
		{
			if ((method.Attributes & System.CodeDom.MemberAttributes.Overloaded) == System.CodeDom.MemberAttributes.Overloaded)
			{
				return true;
			}
			foreach (object obj in type.Members)
			{
				System.CodeDom.CodeTypeMember codeTypeMember = (System.CodeDom.CodeTypeMember)obj;
				System.CodeDom.CodeMemberMethod codeMemberMethod = codeTypeMember as System.CodeDom.CodeMemberMethod;
				if (codeMemberMethod != null)
				{
					if (!(codeMemberMethod is System.CodeDom.CodeTypeConstructor) && !(codeMemberMethod is System.CodeDom.CodeConstructor) && codeMemberMethod != method && codeMemberMethod.Name == method.Name && codeMemberMethod.PrivateImplementationType == null)
					{
						return true;
					}
				}
			}
			return false;
		}

		// Token: 0x060000E4 RID: 228 RVA: 0x00009CDC File Offset: 0x00007EDC
		private string GetEventName(System.CodeDom.CodeMemberEvent evt)
		{
			if (evt.PrivateImplementationType == null)
			{
				return evt.Name;
			}
			string str = evt.PrivateImplementationType.BaseType.Replace('.', '_');
			return str + "_" + evt.Name;
		}

		// Token: 0x060000E5 RID: 229 RVA: 0x00009D24 File Offset: 0x00007F24
		private string GetMethodName(System.CodeDom.CodeMemberMethod method)
		{
			if (method.PrivateImplementationType == null)
			{
				return method.Name;
			}
			string str = method.PrivateImplementationType.BaseType.Replace('.', '_');
			return str + "_" + method.Name;
		}

		// Token: 0x060000E6 RID: 230 RVA: 0x00009D6C File Offset: 0x00007F6C
		private string GetPropertyName(System.CodeDom.CodeMemberProperty property)
		{
			if (property.PrivateImplementationType == null)
			{
				return property.Name;
			}
			string str = property.PrivateImplementationType.BaseType.Replace('.', '_');
			return str + "_" + property.Name;
		}

		// Token: 0x060000E7 RID: 231 RVA: 0x00009DB4 File Offset: 0x00007FB4
		private static bool IsAbstract(System.CodeDom.MemberAttributes attributes)
		{
			return (attributes & System.CodeDom.MemberAttributes.ScopeMask) == System.CodeDom.MemberAttributes.Abstract;
		}

		// Token: 0x0400002D RID: 45
		private string[] Keywords = new string[]
		{
			"AddHandler",
			"AddressOf",
			"Alias",
			"And",
			"AndAlso",
			"Ansi",
			"As",
			"Assembly",
			"Auto",
			"Boolean",
			"ByRef",
			"Byte",
			"ByVal",
			"Call",
			"Case",
			"Catch",
			"CBool",
			"CByte",
			"CChar",
			"CDate",
			"CDec",
			"CDbl",
			"Char",
			"CInt",
			"Class",
			"CLng",
			"CObj",
			"Const",
			"CShort",
			"CSng",
			"CStr",
			"CType",
			"Date",
			"Decimal",
			"Declare",
			"Default",
			"Delegate",
			"Dim",
			"DirectCast",
			"Do",
			"Double",
			"Each",
			"Else",
			"ElseIf",
			"End",
			"Enum",
			"Erase",
			"Error",
			"Event",
			"Exit",
			"False",
			"Finally",
			"For",
			"Friend",
			"Function",
			"Get",
			"GetType",
			"Global",
			"GoSub",
			"GoTo",
			"Handles",
			"If",
			"Implements",
			"Imports",
			"In",
			"Inherits",
			"Integer",
			"Interface",
			"Is",
			"Let",
			"Lib",
			"Like",
			"Long",
			"Loop",
			"Me",
			"Mod",
			"Module",
			"MustInherit",
			"MustOverride",
			"MyBase",
			"MyClass",
			"Namespace",
			"New",
			"Next",
			"Not",
			"Nothing",
			"NotInheritable",
			"NotOverridable",
			"Object",
			"On",
			"Option",
			"Optional",
			"Or",
			"OrElse",
			"Overloads",
			"Overridable",
			"Overrides",
			"ParamArray",
			"Partial",
			"Preserve",
			"Private",
			"Property",
			"Protected",
			"Public",
			"RaiseEvent",
			"ReadOnly",
			"ReDim",
			"REM",
			"RemoveHandler",
			"Resume",
			"Return",
			"Select",
			"Set",
			"Shadows",
			"Shared",
			"Short",
			"Single",
			"Static",
			"Step",
			"Stop",
			"String",
			"Structure",
			"Sub",
			"SyncLock",
			"Then",
			"Throw",
			"To",
			"True",
			"Try",
			"TypeOf",
			"Unicode",
			"Until",
			"Variant",
			"When",
			"While",
			"With",
			"WithEvents",
			"WriteOnly",
			"Xor"
		};

		// Token: 0x02000010 RID: 16
		private enum LineHandling
		{
			// Token: 0x04000030 RID: 48
			InLine,
			// Token: 0x04000031 RID: 49
			ContinueLine,
			// Token: 0x04000032 RID: 50
			NewLine
		}
	}
}
